
  // reaper_plugin_functions_wrapper.hpp
  #include "reaper_plugin_functions.h"

   REAPER_PLUGIN_DLL_EXPORT int REAPERAPI_LoadAPIWrapper(void *(*getAPI)(const char*));

  REAPER_PLUGIN_DLL_EXPORT bool _AddCustomizableMenu(const char* menuidstr, const char* menuname, const char* kbdsecname, bool addtomainmenu);
REAPER_PLUGIN_DLL_EXPORT bool _AddExtensionsMainMenu();
REAPER_PLUGIN_DLL_EXPORT MediaItem* _AddMediaItemToTrack(MediaTrack* tr);
REAPER_PLUGIN_DLL_EXPORT int _AddProjectMarker(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx);
REAPER_PLUGIN_DLL_EXPORT int _AddProjectMarker2(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx, int color);
REAPER_PLUGIN_DLL_EXPORT int _AddRemoveReaScript(bool add, int sectionID, const char* scriptfn, bool commit);
REAPER_PLUGIN_DLL_EXPORT MediaItem_Take* _AddTakeToMediaItem(MediaItem* item);
REAPER_PLUGIN_DLL_EXPORT bool _AddTempoTimeSigMarker(ReaProject* proj, double timepos, double bpm, int timesig_num, int timesig_denom, bool lineartempochange);
REAPER_PLUGIN_DLL_EXPORT void _adjustZoom(double amt, int forceset, bool doupd, int centermode);
REAPER_PLUGIN_DLL_EXPORT bool _AnyTrackSolo(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT bool _APIExists(const char* function_name);
REAPER_PLUGIN_DLL_EXPORT void _APITest();
REAPER_PLUGIN_DLL_EXPORT bool _ApplyNudge(ReaProject* project, int nudgeflag, int nudgewhat, int nudgeunits, double value, bool reverse, int copies);
REAPER_PLUGIN_DLL_EXPORT void _ArmCommand(int cmd, const char* sectionname);
REAPER_PLUGIN_DLL_EXPORT void _Audio_Init();
REAPER_PLUGIN_DLL_EXPORT int _Audio_IsPreBuffer();
REAPER_PLUGIN_DLL_EXPORT int _Audio_IsRunning();
REAPER_PLUGIN_DLL_EXPORT void _Audio_Quit();
REAPER_PLUGIN_DLL_EXPORT int _Audio_RegHardwareHook(bool isAdd, audio_hook_register_t* reg);
REAPER_PLUGIN_DLL_EXPORT bool _AudioAccessorStateChanged(AudioAccessor* accessor);
REAPER_PLUGIN_DLL_EXPORT void _AudioAccessorUpdate(AudioAccessor* accessor);
REAPER_PLUGIN_DLL_EXPORT bool _AudioAccessorValidateState(AudioAccessor* accessor);
REAPER_PLUGIN_DLL_EXPORT void _BypassFxAllTracks(int bypass);
REAPER_PLUGIN_DLL_EXPORT int _CalculatePeaks(PCM_source_transfer_t* srcBlock, PCM_source_peaktransfer_t* pksBlock);
REAPER_PLUGIN_DLL_EXPORT int _CalculatePeaksFloatSrcPtr(PCM_source_transfer_t* srcBlock, PCM_source_peaktransfer_t* pksBlock);
REAPER_PLUGIN_DLL_EXPORT void _ClearAllRecArmed();
REAPER_PLUGIN_DLL_EXPORT void _ClearConsole();
REAPER_PLUGIN_DLL_EXPORT void _ClearPeakCache();
REAPER_PLUGIN_DLL_EXPORT void _ColorFromNative(int col, int* rOut, int* gOut, int* bOut);
REAPER_PLUGIN_DLL_EXPORT int _ColorToNative(int r, int g, int b);
REAPER_PLUGIN_DLL_EXPORT int _CountActionShortcuts(KbdSectionInfo* section, int cmdID);
REAPER_PLUGIN_DLL_EXPORT int _CountAutomationItems(TrackEnvelope* env);
REAPER_PLUGIN_DLL_EXPORT int _CountEnvelopePoints(TrackEnvelope* envelope);
REAPER_PLUGIN_DLL_EXPORT int _CountEnvelopePointsEx(TrackEnvelope* envelope, int autoitem_idx);
REAPER_PLUGIN_DLL_EXPORT int _CountMediaItems(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT int _CountProjectMarkers(ReaProject* proj, int* num_markersOut, int* num_regionsOut);
REAPER_PLUGIN_DLL_EXPORT int _CountSelectedMediaItems(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT int _CountSelectedTracks(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT int _CountSelectedTracks2(ReaProject* proj, bool wantmaster);
REAPER_PLUGIN_DLL_EXPORT int _CountTakeEnvelopes(MediaItem_Take* take);
REAPER_PLUGIN_DLL_EXPORT int _CountTakes(MediaItem* item);
REAPER_PLUGIN_DLL_EXPORT int _CountTCPFXParms(ReaProject* project, MediaTrack* track);
REAPER_PLUGIN_DLL_EXPORT int _CountTempoTimeSigMarkers(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT int _CountTrackEnvelopes(MediaTrack* track);
REAPER_PLUGIN_DLL_EXPORT int _CountTrackMediaItems(MediaTrack* track);
REAPER_PLUGIN_DLL_EXPORT int _CountTracks(ReaProject* projOptional);
REAPER_PLUGIN_DLL_EXPORT void* _CreateLocalOscHandler(void* obj, void* callback);
REAPER_PLUGIN_DLL_EXPORT midi_Input* _CreateMIDIInput(int dev);
REAPER_PLUGIN_DLL_EXPORT midi_Output* _CreateMIDIOutput(int dev, bool streamMode, int* msoffset100);
REAPER_PLUGIN_DLL_EXPORT MediaItem* _CreateNewMIDIItemInProj(MediaTrack* track, double starttime, double endtime, const bool* qnInOptional);
REAPER_PLUGIN_DLL_EXPORT AudioAccessor* _CreateTakeAudioAccessor(MediaItem_Take* take);
REAPER_PLUGIN_DLL_EXPORT AudioAccessor* _CreateTrackAudioAccessor(MediaTrack* track);
REAPER_PLUGIN_DLL_EXPORT int _CreateTrackSend(MediaTrack* tr, MediaTrack* desttrInOptional);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_FlushUndo(bool force);
REAPER_PLUGIN_DLL_EXPORT bool _CSurf_GetTouchState(MediaTrack* trackid, int isPan);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_GoEnd();
REAPER_PLUGIN_DLL_EXPORT void _CSurf_GoStart();
REAPER_PLUGIN_DLL_EXPORT int _CSurf_NumTracks(bool mcpView);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_OnArrow(int whichdir, bool wantzoom);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_OnFwd(int seekplay);
REAPER_PLUGIN_DLL_EXPORT bool _CSurf_OnFXChange(MediaTrack* trackid, int en);
REAPER_PLUGIN_DLL_EXPORT int _CSurf_OnInputMonitorChange(MediaTrack* trackid, int monitor);
REAPER_PLUGIN_DLL_EXPORT int _CSurf_OnInputMonitorChangeEx(MediaTrack* trackid, int monitor, bool allowgang);
REAPER_PLUGIN_DLL_EXPORT bool _CSurf_OnMuteChange(MediaTrack* trackid, int mute);
REAPER_PLUGIN_DLL_EXPORT bool _CSurf_OnMuteChangeEx(MediaTrack* trackid, int mute, bool allowgang);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_OnOscControlMessage(const char* msg, const float* arg);
REAPER_PLUGIN_DLL_EXPORT double _CSurf_OnPanChange(MediaTrack* trackid, double pan, bool relative);
REAPER_PLUGIN_DLL_EXPORT double _CSurf_OnPanChangeEx(MediaTrack* trackid, double pan, bool relative, bool allowGang);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_OnPause();
REAPER_PLUGIN_DLL_EXPORT void _CSurf_OnPlay();
REAPER_PLUGIN_DLL_EXPORT void _CSurf_OnPlayRateChange(double playrate);
REAPER_PLUGIN_DLL_EXPORT bool _CSurf_OnRecArmChange(MediaTrack* trackid, int recarm);
REAPER_PLUGIN_DLL_EXPORT bool _CSurf_OnRecArmChangeEx(MediaTrack* trackid, int recarm, bool allowgang);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_OnRecord();
REAPER_PLUGIN_DLL_EXPORT double _CSurf_OnRecvPanChange(MediaTrack* trackid, int recv_index, double pan, bool relative);
REAPER_PLUGIN_DLL_EXPORT double _CSurf_OnRecvVolumeChange(MediaTrack* trackid, int recv_index, double volume, bool relative);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_OnRew(int seekplay);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_OnRewFwd(int seekplay, int dir);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_OnScroll(int xdir, int ydir);
REAPER_PLUGIN_DLL_EXPORT bool _CSurf_OnSelectedChange(MediaTrack* trackid, int selected);
REAPER_PLUGIN_DLL_EXPORT double _CSurf_OnSendPanChange(MediaTrack* trackid, int send_index, double pan, bool relative);
REAPER_PLUGIN_DLL_EXPORT double _CSurf_OnSendVolumeChange(MediaTrack* trackid, int send_index, double volume, bool relative);
REAPER_PLUGIN_DLL_EXPORT bool _CSurf_OnSoloChange(MediaTrack* trackid, int solo);
REAPER_PLUGIN_DLL_EXPORT bool _CSurf_OnSoloChangeEx(MediaTrack* trackid, int solo, bool allowgang);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_OnStop();
REAPER_PLUGIN_DLL_EXPORT void _CSurf_OnTempoChange(double bpm);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_OnTrackSelection(MediaTrack* trackid);
REAPER_PLUGIN_DLL_EXPORT double _CSurf_OnVolumeChange(MediaTrack* trackid, double volume, bool relative);
REAPER_PLUGIN_DLL_EXPORT double _CSurf_OnVolumeChangeEx(MediaTrack* trackid, double volume, bool relative, bool allowGang);
REAPER_PLUGIN_DLL_EXPORT double _CSurf_OnWidthChange(MediaTrack* trackid, double width, bool relative);
REAPER_PLUGIN_DLL_EXPORT double _CSurf_OnWidthChangeEx(MediaTrack* trackid, double width, bool relative, bool allowGang);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_OnZoom(int xdir, int ydir);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_ResetAllCachedVolPanStates();
REAPER_PLUGIN_DLL_EXPORT void _CSurf_ScrubAmt(double amt);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_SetAutoMode(int mode, IReaperControlSurface* ignoresurf);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_SetPlayState(bool play, bool pause, bool rec, IReaperControlSurface* ignoresurf);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_SetRepeatState(bool rep, IReaperControlSurface* ignoresurf);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_SetSurfaceMute(MediaTrack* trackid, bool mute, IReaperControlSurface* ignoresurf);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_SetSurfacePan(MediaTrack* trackid, double pan, IReaperControlSurface* ignoresurf);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_SetSurfaceRecArm(MediaTrack* trackid, bool recarm, IReaperControlSurface* ignoresurf);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_SetSurfaceSelected(MediaTrack* trackid, bool selected, IReaperControlSurface* ignoresurf);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_SetSurfaceSolo(MediaTrack* trackid, bool solo, IReaperControlSurface* ignoresurf);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_SetSurfaceVolume(MediaTrack* trackid, double volume, IReaperControlSurface* ignoresurf);
REAPER_PLUGIN_DLL_EXPORT void _CSurf_SetTrackListChange();
REAPER_PLUGIN_DLL_EXPORT MediaTrack* _CSurf_TrackFromID(int idx, bool mcpView);
REAPER_PLUGIN_DLL_EXPORT int _CSurf_TrackToID(MediaTrack* track, bool mcpView);
REAPER_PLUGIN_DLL_EXPORT double _DB2SLIDER(double x);
REAPER_PLUGIN_DLL_EXPORT bool _DeleteActionShortcut(KbdSectionInfo* section, int cmdID, int shortcutidx);
REAPER_PLUGIN_DLL_EXPORT bool _DeleteEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx);
REAPER_PLUGIN_DLL_EXPORT bool _DeleteEnvelopePointRange(TrackEnvelope* envelope, double time_start, double time_end);
REAPER_PLUGIN_DLL_EXPORT bool _DeleteEnvelopePointRangeEx(TrackEnvelope* envelope, int autoitem_idx, double time_start, double time_end);
REAPER_PLUGIN_DLL_EXPORT void _DeleteExtState(const char* section, const char* key, bool persist);
REAPER_PLUGIN_DLL_EXPORT bool _DeleteProjectMarker(ReaProject* proj, int markrgnindexnumber, bool isrgn);
REAPER_PLUGIN_DLL_EXPORT bool _DeleteProjectMarkerByIndex(ReaProject* proj, int markrgnidx);
REAPER_PLUGIN_DLL_EXPORT bool _DeleteTakeMarker(MediaItem_Take* take, int idx);
REAPER_PLUGIN_DLL_EXPORT int _DeleteTakeStretchMarkers(MediaItem_Take* take, int idx, const int* countInOptional);
REAPER_PLUGIN_DLL_EXPORT bool _DeleteTempoTimeSigMarker(ReaProject* project, int markerindex);
REAPER_PLUGIN_DLL_EXPORT void _DeleteTrack(MediaTrack* tr);
REAPER_PLUGIN_DLL_EXPORT bool _DeleteTrackMediaItem(MediaTrack* tr, MediaItem* it);
REAPER_PLUGIN_DLL_EXPORT void _DestroyAudioAccessor(AudioAccessor* accessor);
REAPER_PLUGIN_DLL_EXPORT void _DestroyLocalOscHandler(void* local_osc_handler);
REAPER_PLUGIN_DLL_EXPORT bool _DoActionShortcutDialog(HWND hwnd, KbdSectionInfo* section, int cmdID, int shortcutidx);
REAPER_PLUGIN_DLL_EXPORT void _Dock_UpdateDockID(const char* ident_str, int whichDock);
REAPER_PLUGIN_DLL_EXPORT int _DockGetPosition(int whichDock);
REAPER_PLUGIN_DLL_EXPORT int _DockIsChildOfDock(HWND hwnd, bool* isFloatingDockerOut);
REAPER_PLUGIN_DLL_EXPORT void _DockWindowActivate(HWND hwnd);
REAPER_PLUGIN_DLL_EXPORT void _DockWindowAdd(HWND hwnd, const char* name, int pos, bool allowShow);
REAPER_PLUGIN_DLL_EXPORT void _DockWindowAddEx(HWND hwnd, const char* name, const char* identstr, bool allowShow);
REAPER_PLUGIN_DLL_EXPORT void _DockWindowRefresh();
REAPER_PLUGIN_DLL_EXPORT void _DockWindowRefreshForHWND(HWND hwnd);
REAPER_PLUGIN_DLL_EXPORT void _DockWindowRemove(HWND hwnd);
REAPER_PLUGIN_DLL_EXPORT bool _DuplicateCustomizableMenu(void* srcmenu, void* destmenu);
REAPER_PLUGIN_DLL_EXPORT bool _EditTempoTimeSigMarker(ReaProject* project, int markerindex);
REAPER_PLUGIN_DLL_EXPORT void _EnsureNotCompletelyOffscreen(RECT* rInOut);
REAPER_PLUGIN_DLL_EXPORT const char* _EnumerateFiles(const char* path, int fileindex);
REAPER_PLUGIN_DLL_EXPORT const char* _EnumerateSubdirectories(const char* path, int subdirindex);
REAPER_PLUGIN_DLL_EXPORT bool _EnumPitchShiftModes(int mode, const char** strOut);
REAPER_PLUGIN_DLL_EXPORT const char* _EnumPitchShiftSubModes(int mode, int submode);
REAPER_PLUGIN_DLL_EXPORT int _EnumProjectMarkers(int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut);
REAPER_PLUGIN_DLL_EXPORT int _EnumProjectMarkers2(ReaProject* proj, int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut);
REAPER_PLUGIN_DLL_EXPORT int _EnumProjectMarkers3(ReaProject* proj, int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut, int* colorOut);
REAPER_PLUGIN_DLL_EXPORT ReaProject* _EnumProjects(int idx, char* projfnOutOptional, int projfnOutOptional_sz);
REAPER_PLUGIN_DLL_EXPORT bool _EnumProjExtState(ReaProject* proj, const char* extname, int idx, char* keyOutOptional, int keyOutOptional_sz, char* valOutOptional, int valOutOptional_sz);
REAPER_PLUGIN_DLL_EXPORT MediaTrack* _EnumRegionRenderMatrix(ReaProject* proj, int regionindex, int rendertrack);
REAPER_PLUGIN_DLL_EXPORT bool _EnumTrackMIDIProgramNames(int track, int programNumber, char* programName, int programName_sz);
REAPER_PLUGIN_DLL_EXPORT bool _EnumTrackMIDIProgramNamesEx(ReaProject* proj, MediaTrack* track, int programNumber, char* programName, int programName_sz);
REAPER_PLUGIN_DLL_EXPORT int _Envelope_Evaluate(TrackEnvelope* envelope, double time, double samplerate, int samplesRequested, double* valueOutOptional, double* dVdSOutOptional, double* ddVdSOutOptional, double* dddVdSOutOptional);
REAPER_PLUGIN_DLL_EXPORT void _Envelope_FormatValue(TrackEnvelope* env, double value, char* bufOut, int bufOut_sz);
REAPER_PLUGIN_DLL_EXPORT MediaItem_Take* _Envelope_GetParentTake(TrackEnvelope* env, int* indexOutOptional, int* index2OutOptional);
REAPER_PLUGIN_DLL_EXPORT MediaTrack* _Envelope_GetParentTrack(TrackEnvelope* env, int* indexOutOptional, int* index2OutOptional);
REAPER_PLUGIN_DLL_EXPORT bool _Envelope_SortPoints(TrackEnvelope* envelope);
REAPER_PLUGIN_DLL_EXPORT bool _Envelope_SortPointsEx(TrackEnvelope* envelope, int autoitem_idx);
REAPER_PLUGIN_DLL_EXPORT const char* _ExecProcess(const char* cmdline, int timeoutmsec);
REAPER_PLUGIN_DLL_EXPORT bool _file_exists(const char* path);
REAPER_PLUGIN_DLL_EXPORT int _FindTempoTimeSigMarker(ReaProject* project, double time);
REAPER_PLUGIN_DLL_EXPORT void _format_timestr(double tpos, char* buf, int buf_sz);
REAPER_PLUGIN_DLL_EXPORT void _format_timestr_len(double tpos, char* buf, int buf_sz, double offset, int modeoverride);
REAPER_PLUGIN_DLL_EXPORT void _format_timestr_pos(double tpos, char* buf, int buf_sz, int modeoverride);
REAPER_PLUGIN_DLL_EXPORT void _FreeHeapPtr(void* ptr);
REAPER_PLUGIN_DLL_EXPORT void _genGuid(GUID* g);
REAPER_PLUGIN_DLL_EXPORT void* _get_config_var(const char* name, int* szOut);
REAPER_PLUGIN_DLL_EXPORT bool _get_config_var_string(const char* name, char* bufOut, int bufOut_sz);
REAPER_PLUGIN_DLL_EXPORT const char* _get_ini_file();
REAPER_PLUGIN_DLL_EXPORT void* _get_midi_config_var(const char* name, int* szOut);
REAPER_PLUGIN_DLL_EXPORT bool _GetActionShortcutDesc(KbdSectionInfo* section, int cmdID, int shortcutidx, char* desc, int desclen);
REAPER_PLUGIN_DLL_EXPORT MediaItem_Take* _GetActiveTake(MediaItem* item);
REAPER_PLUGIN_DLL_EXPORT int _GetAllProjectPlayStates(ReaProject* ignoreProject);
REAPER_PLUGIN_DLL_EXPORT const char* _GetAppVersion();
REAPER_PLUGIN_DLL_EXPORT int _GetArmedCommand(char* secOut, int secOut_sz);
REAPER_PLUGIN_DLL_EXPORT double _GetAudioAccessorEndTime(AudioAccessor* accessor);
REAPER_PLUGIN_DLL_EXPORT void _GetAudioAccessorHash(AudioAccessor* accessor, char* hashNeed128);
REAPER_PLUGIN_DLL_EXPORT int _GetAudioAccessorSamples(AudioAccessor* accessor, int samplerate, int numchannels, double starttime_sec, int numsamplesperchannel, double* samplebuffer);
REAPER_PLUGIN_DLL_EXPORT double _GetAudioAccessorStartTime(AudioAccessor* accessor);
REAPER_PLUGIN_DLL_EXPORT bool _GetAudioDeviceInfo(const char* attribute, char* desc, int desc_sz);
REAPER_PLUGIN_DLL_EXPORT INT_PTR _GetColorTheme(int idx, int defval);
REAPER_PLUGIN_DLL_EXPORT void* _GetColorThemeStruct(int* szOut);
REAPER_PLUGIN_DLL_EXPORT int _GetConfigWantsDock(const char* ident_str);
REAPER_PLUGIN_DLL_EXPORT HMENU _GetContextMenu(int idx);
REAPER_PLUGIN_DLL_EXPORT ReaProject* _GetCurrentProjectInLoadSave();
REAPER_PLUGIN_DLL_EXPORT int _GetCursorContext();
REAPER_PLUGIN_DLL_EXPORT int _GetCursorContext2(bool want_last_valid);
REAPER_PLUGIN_DLL_EXPORT double _GetCursorPosition();
REAPER_PLUGIN_DLL_EXPORT double _GetCursorPositionEx(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT int _GetDisplayedMediaItemColor(MediaItem* item);
REAPER_PLUGIN_DLL_EXPORT int _GetDisplayedMediaItemColor2(MediaItem* item, MediaItem_Take* take);
REAPER_PLUGIN_DLL_EXPORT double _GetEnvelopeInfo_Value(TrackEnvelope* tr, const char* parmname);
REAPER_PLUGIN_DLL_EXPORT bool _GetEnvelopeName(TrackEnvelope* env, char* bufOut, int bufOut_sz);
REAPER_PLUGIN_DLL_EXPORT bool _GetEnvelopePoint(TrackEnvelope* envelope, int ptidx, double* timeOutOptional, double* valueOutOptional, int* shapeOutOptional, double* tensionOutOptional, bool* selectedOutOptional);
REAPER_PLUGIN_DLL_EXPORT int _GetEnvelopePointByTime(TrackEnvelope* envelope, double time);
REAPER_PLUGIN_DLL_EXPORT int _GetEnvelopePointByTimeEx(TrackEnvelope* envelope, int autoitem_idx, double time);
REAPER_PLUGIN_DLL_EXPORT bool _GetEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx, double* timeOutOptional, double* valueOutOptional, int* shapeOutOptional, double* tensionOutOptional, bool* selectedOutOptional);
REAPER_PLUGIN_DLL_EXPORT int _GetEnvelopeScalingMode(TrackEnvelope* env);
REAPER_PLUGIN_DLL_EXPORT bool _GetEnvelopeStateChunk(TrackEnvelope* env, char* strNeedBig, int strNeedBig_sz, bool isundoOptional);
REAPER_PLUGIN_DLL_EXPORT const char* _GetExePath();
REAPER_PLUGIN_DLL_EXPORT const char* _GetExtState(const char* section, const char* key);
REAPER_PLUGIN_DLL_EXPORT int _GetFocusedFX(int* tracknumberOut, int* itemnumberOut, int* fxnumberOut);
REAPER_PLUGIN_DLL_EXPORT int _GetFocusedFX2(int* tracknumberOut, int* itemnumberOut, int* fxnumberOut);
REAPER_PLUGIN_DLL_EXPORT int _GetFreeDiskSpaceForRecordPath(ReaProject* proj, int pathidx);
REAPER_PLUGIN_DLL_EXPORT TrackEnvelope* _GetFXEnvelope(MediaTrack* track, int fxindex, int parameterindex, bool create);
REAPER_PLUGIN_DLL_EXPORT int _GetGlobalAutomationOverride();
REAPER_PLUGIN_DLL_EXPORT double _GetHZoomLevel();
REAPER_PLUGIN_DLL_EXPORT void* _GetIconThemePointer(const char* name);
REAPER_PLUGIN_DLL_EXPORT void* _GetIconThemePointerForDPI(const char* name, int dpisc);
REAPER_PLUGIN_DLL_EXPORT void* _GetIconThemeStruct(int* szOut);
REAPER_PLUGIN_DLL_EXPORT const char* _GetInputChannelName(int channelIndex);
REAPER_PLUGIN_DLL_EXPORT void _GetInputOutputLatency(int* inputlatencyOut, int* outputLatencyOut);
REAPER_PLUGIN_DLL_EXPORT double _GetItemEditingTime2(PCM_source** which_itemOut, int* flagsOut);
REAPER_PLUGIN_DLL_EXPORT MediaItem* _GetItemFromPoint(int screen_x, int screen_y, bool allow_locked, MediaItem_Take** takeOutOptional);
REAPER_PLUGIN_DLL_EXPORT ReaProject* _GetItemProjectContext(MediaItem* item);
REAPER_PLUGIN_DLL_EXPORT bool _GetItemStateChunk(MediaItem* item, char* strNeedBig, int strNeedBig_sz, bool isundoOptional);
REAPER_PLUGIN_DLL_EXPORT const char* _GetLastColorThemeFile();
REAPER_PLUGIN_DLL_EXPORT void _GetLastMarkerAndCurRegion(ReaProject* proj, double time, int* markeridxOut, int* regionidxOut);
REAPER_PLUGIN_DLL_EXPORT bool _GetLastTouchedFX(int* tracknumberOut, int* fxnumberOut, int* paramnumberOut);
REAPER_PLUGIN_DLL_EXPORT MediaTrack* _GetLastTouchedTrack();
REAPER_PLUGIN_DLL_EXPORT HWND _GetMainHwnd();
REAPER_PLUGIN_DLL_EXPORT int _GetMasterMuteSoloFlags();
REAPER_PLUGIN_DLL_EXPORT MediaTrack* _GetMasterTrack(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT int _GetMasterTrackVisibility();
REAPER_PLUGIN_DLL_EXPORT int _GetMaxMidiInputs();
REAPER_PLUGIN_DLL_EXPORT int _GetMaxMidiOutputs();
REAPER_PLUGIN_DLL_EXPORT int _GetMediaFileMetadata(PCM_source* mediaSource, const char* identifier, char* bufOutNeedBig, int bufOutNeedBig_sz);
REAPER_PLUGIN_DLL_EXPORT MediaItem* _GetMediaItem(ReaProject* proj, int itemidx);
REAPER_PLUGIN_DLL_EXPORT MediaTrack* _GetMediaItem_Track(MediaItem* item);
REAPER_PLUGIN_DLL_EXPORT double _GetMediaItemInfo_Value(MediaItem* item, const char* parmname);
REAPER_PLUGIN_DLL_EXPORT int _GetMediaItemNumTakes(MediaItem* item);
REAPER_PLUGIN_DLL_EXPORT MediaItem_Take* _GetMediaItemTake(MediaItem* item, int tk);
REAPER_PLUGIN_DLL_EXPORT MediaItem* _GetMediaItemTake_Item(MediaItem_Take* take);
REAPER_PLUGIN_DLL_EXPORT int _GetMediaItemTake_Peaks(MediaItem_Take* take, double peakrate, double starttime, int numchannels, int numsamplesperchannel, int want_extra_type, double* buf);
REAPER_PLUGIN_DLL_EXPORT PCM_source* _GetMediaItemTake_Source(MediaItem_Take* take);
REAPER_PLUGIN_DLL_EXPORT MediaTrack* _GetMediaItemTake_Track(MediaItem_Take* take);
REAPER_PLUGIN_DLL_EXPORT MediaItem_Take* _GetMediaItemTakeByGUID(ReaProject* project, const GUID* guid);
REAPER_PLUGIN_DLL_EXPORT double _GetMediaItemTakeInfo_Value(MediaItem_Take* take, const char* parmname);
REAPER_PLUGIN_DLL_EXPORT MediaTrack* _GetMediaItemTrack(MediaItem* item);
REAPER_PLUGIN_DLL_EXPORT void _GetMediaSourceFileName(PCM_source* source, char* filenamebuf, int filenamebuf_sz);
REAPER_PLUGIN_DLL_EXPORT double _GetMediaSourceLength(PCM_source* source, bool* lengthIsQNOut);
REAPER_PLUGIN_DLL_EXPORT int _GetMediaSourceNumChannels(PCM_source* source);
REAPER_PLUGIN_DLL_EXPORT PCM_source* _GetMediaSourceParent(PCM_source* src);
REAPER_PLUGIN_DLL_EXPORT int _GetMediaSourceSampleRate(PCM_source* source);
REAPER_PLUGIN_DLL_EXPORT void _GetMediaSourceType(PCM_source* source, char* typebuf, int typebuf_sz);
REAPER_PLUGIN_DLL_EXPORT double _GetMediaTrackInfo_Value(MediaTrack* tr, const char* parmname);
REAPER_PLUGIN_DLL_EXPORT bool _GetMIDIInputName(int dev, char* nameout, int nameout_sz);
REAPER_PLUGIN_DLL_EXPORT bool _GetMIDIOutputName(int dev, char* nameout, int nameout_sz);
REAPER_PLUGIN_DLL_EXPORT MediaTrack* _GetMixerScroll();
REAPER_PLUGIN_DLL_EXPORT void _GetMouseModifier(const char* context, int modifier_flag, char* action, int action_sz);
REAPER_PLUGIN_DLL_EXPORT void _GetMousePosition(int* xOut, int* yOut);
REAPER_PLUGIN_DLL_EXPORT int _GetNumAudioInputs();
REAPER_PLUGIN_DLL_EXPORT int _GetNumAudioOutputs();
REAPER_PLUGIN_DLL_EXPORT int _GetNumMIDIInputs();
REAPER_PLUGIN_DLL_EXPORT int _GetNumMIDIOutputs();
REAPER_PLUGIN_DLL_EXPORT int _GetNumTakeMarkers(MediaItem_Take* take);
REAPER_PLUGIN_DLL_EXPORT int _GetNumTracks();
REAPER_PLUGIN_DLL_EXPORT const char* _GetOS();
REAPER_PLUGIN_DLL_EXPORT const char* _GetOutputChannelName(int channelIndex);
REAPER_PLUGIN_DLL_EXPORT double _GetOutputLatency();
REAPER_PLUGIN_DLL_EXPORT MediaTrack* _GetParentTrack(MediaTrack* track);
REAPER_PLUGIN_DLL_EXPORT void _GetPeakFileName(const char* fn, char* buf, int buf_sz);
REAPER_PLUGIN_DLL_EXPORT void _GetPeakFileNameEx(const char* fn, char* buf, int buf_sz, bool forWrite);
REAPER_PLUGIN_DLL_EXPORT void _GetPeakFileNameEx2(const char* fn, char* buf, int buf_sz, bool forWrite, const char* peaksfileextension);
REAPER_PLUGIN_DLL_EXPORT void* _GetPeaksBitmap(PCM_source_peaktransfer_t* pks, double maxamp, int w, int h, LICE_IBitmap* bmp);
REAPER_PLUGIN_DLL_EXPORT double _GetPlayPosition();
REAPER_PLUGIN_DLL_EXPORT double _GetPlayPosition2();
REAPER_PLUGIN_DLL_EXPORT double _GetPlayPosition2Ex(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT double _GetPlayPositionEx(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT int _GetPlayState();
REAPER_PLUGIN_DLL_EXPORT int _GetPlayStateEx(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT void _GetPreferredDiskReadMode(int* mode, int* nb, int* bs);
REAPER_PLUGIN_DLL_EXPORT void _GetPreferredDiskReadModePeak(int* mode, int* nb, int* bs);
REAPER_PLUGIN_DLL_EXPORT void _GetPreferredDiskWriteMode(int* mode, int* nb, int* bs);
REAPER_PLUGIN_DLL_EXPORT double _GetProjectLength(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT void _GetProjectName(ReaProject* proj, char* buf, int buf_sz);
REAPER_PLUGIN_DLL_EXPORT void _GetProjectPath(char* buf, int buf_sz);
REAPER_PLUGIN_DLL_EXPORT void _GetProjectPathEx(ReaProject* proj, char* buf, int buf_sz);
REAPER_PLUGIN_DLL_EXPORT int _GetProjectStateChangeCount(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT double _GetProjectTimeOffset(ReaProject* proj, bool rndframe);
REAPER_PLUGIN_DLL_EXPORT void _GetProjectTimeSignature(double* bpmOut, double* bpiOut);
REAPER_PLUGIN_DLL_EXPORT void _GetProjectTimeSignature2(ReaProject* proj, double* bpmOut, double* bpiOut);
REAPER_PLUGIN_DLL_EXPORT int _GetProjExtState(ReaProject* proj, const char* extname, const char* key, char* valOutNeedBig, int valOutNeedBig_sz);
REAPER_PLUGIN_DLL_EXPORT const char* _GetResourcePath();
REAPER_PLUGIN_DLL_EXPORT TrackEnvelope* _GetSelectedEnvelope(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT MediaItem* _GetSelectedMediaItem(ReaProject* proj, int selitem);
REAPER_PLUGIN_DLL_EXPORT MediaTrack* _GetSelectedTrack(ReaProject* proj, int seltrackidx);
REAPER_PLUGIN_DLL_EXPORT MediaTrack* _GetSelectedTrack2(ReaProject* proj, int seltrackidx, bool wantmaster);
REAPER_PLUGIN_DLL_EXPORT TrackEnvelope* _GetSelectedTrackEnvelope(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT void _GetSet_ArrangeView2(ReaProject* proj, bool isSet, int screen_x_start, int screen_x_end, double* start_timeOut, double* end_timeOut);
REAPER_PLUGIN_DLL_EXPORT void _GetSet_LoopTimeRange(bool isSet, bool isLoop, double* startOut, double* endOut, bool allowautoseek);
REAPER_PLUGIN_DLL_EXPORT void _GetSet_LoopTimeRange2(ReaProject* proj, bool isSet, bool isLoop, double* startOut, double* endOut, bool allowautoseek);
REAPER_PLUGIN_DLL_EXPORT double _GetSetAutomationItemInfo(TrackEnvelope* env, int autoitem_idx, const char* desc, double value, bool is_set);
REAPER_PLUGIN_DLL_EXPORT bool _GetSetAutomationItemInfo_String(TrackEnvelope* env, int autoitem_idx, const char* desc, char* valuestrNeedBig, bool is_set);
REAPER_PLUGIN_DLL_EXPORT bool _GetSetEnvelopeInfo_String(TrackEnvelope* env, const char* parmname, char* stringNeedBig, bool setNewValue);
REAPER_PLUGIN_DLL_EXPORT bool _GetSetEnvelopeState(TrackEnvelope* env, char* str, int str_sz);
REAPER_PLUGIN_DLL_EXPORT bool _GetSetEnvelopeState2(TrackEnvelope* env, char* str, int str_sz, bool isundo);
REAPER_PLUGIN_DLL_EXPORT bool _GetSetItemState(MediaItem* item, char* str, int str_sz);
REAPER_PLUGIN_DLL_EXPORT bool _GetSetItemState2(MediaItem* item, char* str, int str_sz, bool isundo);
REAPER_PLUGIN_DLL_EXPORT void* _GetSetMediaItemInfo(MediaItem* item, const char* parmname, void* setNewValue);
REAPER_PLUGIN_DLL_EXPORT bool _GetSetMediaItemInfo_String(MediaItem* item, const char* parmname, char* stringNeedBig, bool setNewValue);
REAPER_PLUGIN_DLL_EXPORT void* _GetSetMediaItemTakeInfo(MediaItem_Take* tk, const char* parmname, void* setNewValue);
REAPER_PLUGIN_DLL_EXPORT bool _GetSetMediaItemTakeInfo_String(MediaItem_Take* tk, const char* parmname, char* stringNeedBig, bool setNewValue);
REAPER_PLUGIN_DLL_EXPORT void* _GetSetMediaTrackInfo(MediaTrack* tr, const char* parmname, void* setNewValue);
REAPER_PLUGIN_DLL_EXPORT bool _GetSetMediaTrackInfo_String(MediaTrack* tr, const char* parmname, char* stringNeedBig, bool setNewValue);
REAPER_PLUGIN_DLL_EXPORT char* _GetSetObjectState(void* obj, const char* str);
REAPER_PLUGIN_DLL_EXPORT char* _GetSetObjectState2(void* obj, const char* str, bool isundo);
REAPER_PLUGIN_DLL_EXPORT void _GetSetProjectAuthor(ReaProject* proj, bool set, char* author, int author_sz);
REAPER_PLUGIN_DLL_EXPORT int _GetSetProjectGrid(ReaProject* project, bool set, double* divisionInOutOptional, int* swingmodeInOutOptional, double* swingamtInOutOptional);
REAPER_PLUGIN_DLL_EXPORT double _GetSetProjectInfo(ReaProject* project, const char* desc, double value, bool is_set);
REAPER_PLUGIN_DLL_EXPORT bool _GetSetProjectInfo_String(ReaProject* project, const char* desc, char* valuestrNeedBig, bool is_set);
REAPER_PLUGIN_DLL_EXPORT void _GetSetProjectNotes(ReaProject* proj, bool set, char* notesNeedBig, int notesNeedBig_sz);
REAPER_PLUGIN_DLL_EXPORT int _GetSetRepeat(int val);
REAPER_PLUGIN_DLL_EXPORT int _GetSetRepeatEx(ReaProject* proj, int val);
REAPER_PLUGIN_DLL_EXPORT unsigned int _GetSetTrackGroupMembership(MediaTrack* tr, const char* groupname, unsigned int setmask, unsigned int setvalue);
REAPER_PLUGIN_DLL_EXPORT unsigned int _GetSetTrackGroupMembershipHigh(MediaTrack* tr, const char* groupname, unsigned int setmask, unsigned int setvalue);
REAPER_PLUGIN_DLL_EXPORT const char* _GetSetTrackMIDISupportFile(ReaProject* proj, MediaTrack* track, int which, const char* filename);
REAPER_PLUGIN_DLL_EXPORT void* _GetSetTrackSendInfo(MediaTrack* tr, int category, int sendidx, const char* parmname, void* setNewValue);
REAPER_PLUGIN_DLL_EXPORT bool _GetSetTrackSendInfo_String(MediaTrack* tr, int category, int sendidx, const char* parmname, char* stringNeedBig, bool setNewValue);
REAPER_PLUGIN_DLL_EXPORT bool _GetSetTrackState(MediaTrack* track, char* str, int str_sz);
REAPER_PLUGIN_DLL_EXPORT bool _GetSetTrackState2(MediaTrack* track, char* str, int str_sz, bool isundo);
REAPER_PLUGIN_DLL_EXPORT ReaProject* _GetSubProjectFromSource(PCM_source* src);
REAPER_PLUGIN_DLL_EXPORT MediaItem_Take* _GetTake(MediaItem* item, int takeidx);
REAPER_PLUGIN_DLL_EXPORT TrackEnvelope* _GetTakeEnvelope(MediaItem_Take* take, int envidx);
REAPER_PLUGIN_DLL_EXPORT TrackEnvelope* _GetTakeEnvelopeByName(MediaItem_Take* take, const char* envname);
REAPER_PLUGIN_DLL_EXPORT double _GetTakeMarker(MediaItem_Take* take, int idx, char* nameOut, int nameOut_sz, int* colorOutOptional);
REAPER_PLUGIN_DLL_EXPORT const char* _GetTakeName(MediaItem_Take* take);
REAPER_PLUGIN_DLL_EXPORT int _GetTakeNumStretchMarkers(MediaItem_Take* take);
REAPER_PLUGIN_DLL_EXPORT int _GetTakeStretchMarker(MediaItem_Take* take, int idx, double* posOut, double* srcposOutOptional);
REAPER_PLUGIN_DLL_EXPORT double _GetTakeStretchMarkerSlope(MediaItem_Take* take, int idx);
REAPER_PLUGIN_DLL_EXPORT bool _GetTCPFXParm(ReaProject* project, MediaTrack* track, int index, int* fxindexOut, int* parmidxOut);
REAPER_PLUGIN_DLL_EXPORT bool _GetTempoMatchPlayRate(PCM_source* source, double srcscale, double position, double mult, double* rateOut, double* targetlenOut);
REAPER_PLUGIN_DLL_EXPORT bool _GetTempoTimeSigMarker(ReaProject* proj, int ptidx, double* timeposOut, int* measureposOut, double* beatposOut, double* bpmOut, int* timesig_numOut, int* timesig_denomOut, bool* lineartempoOut);
REAPER_PLUGIN_DLL_EXPORT int _GetThemeColor(const char* ini_key, int flagsOptional);
REAPER_PLUGIN_DLL_EXPORT int _GetToggleCommandState(int command_id);
REAPER_PLUGIN_DLL_EXPORT int _GetToggleCommandState2(KbdSectionInfo* section, int command_id);
REAPER_PLUGIN_DLL_EXPORT int _GetToggleCommandStateEx(int section_id, int command_id);
REAPER_PLUGIN_DLL_EXPORT int _GetToggleCommandStateThroughHooks(KbdSectionInfo* section, int command_id);
REAPER_PLUGIN_DLL_EXPORT HWND _GetTooltipWindow();
REAPER_PLUGIN_DLL_EXPORT MediaTrack* _GetTrack(ReaProject* proj, int trackidx);
REAPER_PLUGIN_DLL_EXPORT int _GetTrackAutomationMode(MediaTrack* tr);
REAPER_PLUGIN_DLL_EXPORT int _GetTrackColor(MediaTrack* track);
REAPER_PLUGIN_DLL_EXPORT int _GetTrackDepth(MediaTrack* track);
REAPER_PLUGIN_DLL_EXPORT TrackEnvelope* _GetTrackEnvelope(MediaTrack* track, int envidx);
REAPER_PLUGIN_DLL_EXPORT TrackEnvelope* _GetTrackEnvelopeByChunkName(MediaTrack* tr, const char* cfgchunkname);
REAPER_PLUGIN_DLL_EXPORT TrackEnvelope* _GetTrackEnvelopeByName(MediaTrack* track, const char* envname);
REAPER_PLUGIN_DLL_EXPORT MediaTrack* _GetTrackFromPoint(int screen_x, int screen_y, int* infoOutOptional);
REAPER_PLUGIN_DLL_EXPORT GUID* _GetTrackGUID(MediaTrack* tr);
REAPER_PLUGIN_DLL_EXPORT const char* _GetTrackInfo(INT_PTR track, int* flags);
REAPER_PLUGIN_DLL_EXPORT MediaItem* _GetTrackMediaItem(MediaTrack* tr, int itemidx);
REAPER_PLUGIN_DLL_EXPORT bool _GetTrackMIDILyrics(MediaTrack* track, int flag, char* bufWantNeedBig, int* bufWantNeedBig_sz);
REAPER_PLUGIN_DLL_EXPORT const char* _GetTrackMIDINoteName(int track, int pitch, int chan);
REAPER_PLUGIN_DLL_EXPORT const char* _GetTrackMIDINoteNameEx(ReaProject* proj, MediaTrack* track, int pitch, int chan);
REAPER_PLUGIN_DLL_EXPORT void _GetTrackMIDINoteRange(ReaProject* proj, MediaTrack* track, int* note_loOut, int* note_hiOut);
REAPER_PLUGIN_DLL_EXPORT bool _GetTrackName(MediaTrack* track, char* bufOut, int bufOut_sz);
REAPER_PLUGIN_DLL_EXPORT int _GetTrackNumMediaItems(MediaTrack* tr);
REAPER_PLUGIN_DLL_EXPORT int _GetTrackNumSends(MediaTrack* tr, int category);
REAPER_PLUGIN_DLL_EXPORT bool _GetTrackReceiveName(MediaTrack* track, int recv_index, char* buf, int buf_sz);
REAPER_PLUGIN_DLL_EXPORT bool _GetTrackReceiveUIMute(MediaTrack* track, int recv_index, bool* muteOut);
REAPER_PLUGIN_DLL_EXPORT bool _GetTrackReceiveUIVolPan(MediaTrack* track, int recv_index, double* volumeOut, double* panOut);
REAPER_PLUGIN_DLL_EXPORT double _GetTrackSendInfo_Value(MediaTrack* tr, int category, int sendidx, const char* parmname);
REAPER_PLUGIN_DLL_EXPORT bool _GetTrackSendName(MediaTrack* track, int send_index, char* buf, int buf_sz);
REAPER_PLUGIN_DLL_EXPORT bool _GetTrackSendUIMute(MediaTrack* track, int send_index, bool* muteOut);
REAPER_PLUGIN_DLL_EXPORT bool _GetTrackSendUIVolPan(MediaTrack* track, int send_index, double* volumeOut, double* panOut);
REAPER_PLUGIN_DLL_EXPORT const char* _GetTrackState(MediaTrack* track, int* flagsOut);
REAPER_PLUGIN_DLL_EXPORT bool _GetTrackStateChunk(MediaTrack* track, char* strNeedBig, int strNeedBig_sz, bool isundoOptional);
REAPER_PLUGIN_DLL_EXPORT bool _GetTrackUIMute(MediaTrack* track, bool* muteOut);
REAPER_PLUGIN_DLL_EXPORT bool _GetTrackUIPan(MediaTrack* track, double* pan1Out, double* pan2Out, int* panmodeOut);
REAPER_PLUGIN_DLL_EXPORT bool _GetTrackUIVolPan(MediaTrack* track, double* volumeOut, double* panOut);
REAPER_PLUGIN_DLL_EXPORT void _GetUnderrunTime(unsigned int* audio_xrunOutOptional, unsigned int* media_xrunOutOptional, unsigned int* curtimeOutOptional);
REAPER_PLUGIN_DLL_EXPORT bool _GetUserFileNameForRead(char* filenameNeed4096, const char* title, const char* defext);
REAPER_PLUGIN_DLL_EXPORT bool _GetUserInputs(const char* title, int num_inputs, const char* captions_csv, char* retvals_csv, int retvals_csv_sz);
REAPER_PLUGIN_DLL_EXPORT void _GoToMarker(ReaProject* proj, int marker_index, bool use_timeline_order);
REAPER_PLUGIN_DLL_EXPORT void _GoToRegion(ReaProject* proj, int region_index, bool use_timeline_order);
REAPER_PLUGIN_DLL_EXPORT int _GR_SelectColor(HWND hwnd, int* colorOut);
REAPER_PLUGIN_DLL_EXPORT int _GSC_mainwnd(int t);
REAPER_PLUGIN_DLL_EXPORT void _guidToString(const GUID* g, char* destNeed64);
REAPER_PLUGIN_DLL_EXPORT bool _HasExtState(const char* section, const char* key);
REAPER_PLUGIN_DLL_EXPORT const char* _HasTrackMIDIPrograms(int track);
REAPER_PLUGIN_DLL_EXPORT const char* _HasTrackMIDIProgramsEx(ReaProject* proj, MediaTrack* track);
REAPER_PLUGIN_DLL_EXPORT void _Help_Set(const char* helpstring, bool is_temporary_help);
REAPER_PLUGIN_DLL_EXPORT void _HiresPeaksFromSource(PCM_source* src, PCM_source_peaktransfer_t* block);
REAPER_PLUGIN_DLL_EXPORT void _image_resolve_fn(const char* in, char* out, int out_sz);
REAPER_PLUGIN_DLL_EXPORT int _InsertAutomationItem(TrackEnvelope* env, int pool_id, double position, double length);
REAPER_PLUGIN_DLL_EXPORT bool _InsertEnvelopePoint(TrackEnvelope* envelope, double time, double value, int shape, double tension, bool selected, bool* noSortInOptional);
REAPER_PLUGIN_DLL_EXPORT bool _InsertEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, double time, double value, int shape, double tension, bool selected, bool* noSortInOptional);
REAPER_PLUGIN_DLL_EXPORT int _InsertMedia(const char* file, int mode);
REAPER_PLUGIN_DLL_EXPORT int _InsertMediaSection(const char* file, int mode, double startpct, double endpct, double pitchshift);
REAPER_PLUGIN_DLL_EXPORT void _InsertTrackAtIndex(int idx, bool wantDefaults);
REAPER_PLUGIN_DLL_EXPORT int _IsInRealTimeAudio();
REAPER_PLUGIN_DLL_EXPORT bool _IsItemTakeActiveForPlayback(MediaItem* item, MediaItem_Take* take);
REAPER_PLUGIN_DLL_EXPORT bool _IsMediaExtension(const char* ext, bool wantOthers);
REAPER_PLUGIN_DLL_EXPORT bool _IsMediaItemSelected(MediaItem* item);
REAPER_PLUGIN_DLL_EXPORT int _IsProjectDirty(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT bool _IsREAPER();
REAPER_PLUGIN_DLL_EXPORT bool _IsTrackSelected(MediaTrack* track);
REAPER_PLUGIN_DLL_EXPORT bool _IsTrackVisible(MediaTrack* track, bool mixer);
REAPER_PLUGIN_DLL_EXPORT joystick_device* _joystick_create(const GUID* guid);
REAPER_PLUGIN_DLL_EXPORT void _joystick_destroy(joystick_device* device);
REAPER_PLUGIN_DLL_EXPORT const char* _joystick_enum(int index, const char** namestrOutOptional);
REAPER_PLUGIN_DLL_EXPORT double _joystick_getaxis(joystick_device* dev, int axis);
REAPER_PLUGIN_DLL_EXPORT unsigned int _joystick_getbuttonmask(joystick_device* dev);
REAPER_PLUGIN_DLL_EXPORT int _joystick_getinfo(joystick_device* dev, int* axesOutOptional, int* povsOutOptional);
REAPER_PLUGIN_DLL_EXPORT double _joystick_getpov(joystick_device* dev, int pov);
REAPER_PLUGIN_DLL_EXPORT bool _joystick_update(joystick_device* dev);
REAPER_PLUGIN_DLL_EXPORT int _kbd_enumerateActions(KbdSectionInfo* section, int idx, const char** nameOut);
REAPER_PLUGIN_DLL_EXPORT void _kbd_formatKeyName(ACCEL* ac, char* s);
REAPER_PLUGIN_DLL_EXPORT void _kbd_getCommandName(int cmd, char* s, KbdSectionInfo* section);
REAPER_PLUGIN_DLL_EXPORT const char* _kbd_getTextFromCmd(DWORD cmd, KbdSectionInfo* section);
REAPER_PLUGIN_DLL_EXPORT int _KBD_OnMainActionEx(int cmd, int val, int valhw, int relmode, HWND hwnd, ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT void _kbd_OnMidiEvent(MIDI_event_t* evt, int dev_index);
REAPER_PLUGIN_DLL_EXPORT void _kbd_OnMidiList(MIDI_eventlist* list, int dev_index);
REAPER_PLUGIN_DLL_EXPORT void _kbd_ProcessActionsMenu(HMENU menu, KbdSectionInfo* section);
REAPER_PLUGIN_DLL_EXPORT bool _kbd_processMidiEventActionEx(MIDI_event_t* evt, KbdSectionInfo* section, HWND hwndCtx);
REAPER_PLUGIN_DLL_EXPORT void _kbd_reprocessMenu(HMENU menu, KbdSectionInfo* section);
REAPER_PLUGIN_DLL_EXPORT bool _kbd_RunCommandThroughHooks(KbdSectionInfo* section, int* actionCommandID, int* val, int* valhw, int* relmode, HWND hwnd);
REAPER_PLUGIN_DLL_EXPORT int _kbd_translateAccelerator(HWND hwnd, MSG* msg, KbdSectionInfo* section);
REAPER_PLUGIN_DLL_EXPORT bool _kbd_translateMouse(void* winmsg, unsigned char* midimsg);
REAPER_PLUGIN_DLL_EXPORT void _LICE__Destroy(LICE_IBitmap* bm);
REAPER_PLUGIN_DLL_EXPORT void _LICE__DestroyFont(LICE_IFont* font);
REAPER_PLUGIN_DLL_EXPORT int _LICE__DrawText(LICE_IFont* font, LICE_IBitmap* bm, const char* str, int strcnt, RECT* rect, UINT dtFlags);
REAPER_PLUGIN_DLL_EXPORT void* _LICE__GetBits(LICE_IBitmap* bm);
REAPER_PLUGIN_DLL_EXPORT HDC _LICE__GetDC(LICE_IBitmap* bm);
REAPER_PLUGIN_DLL_EXPORT int _LICE__GetHeight(LICE_IBitmap* bm);
REAPER_PLUGIN_DLL_EXPORT int _LICE__GetRowSpan(LICE_IBitmap* bm);
REAPER_PLUGIN_DLL_EXPORT int _LICE__GetWidth(LICE_IBitmap* bm);
REAPER_PLUGIN_DLL_EXPORT bool _LICE__IsFlipped(LICE_IBitmap* bm);
REAPER_PLUGIN_DLL_EXPORT bool _LICE__resize(LICE_IBitmap* bm, int w, int h);
REAPER_PLUGIN_DLL_EXPORT LICE_pixel _LICE__SetBkColor(LICE_IFont* font, LICE_pixel color);
REAPER_PLUGIN_DLL_EXPORT void _LICE__SetFromHFont(LICE_IFont* font, HFONT hfont, int flags);
REAPER_PLUGIN_DLL_EXPORT LICE_pixel _LICE__SetTextColor(LICE_IFont* font, LICE_pixel color);
REAPER_PLUGIN_DLL_EXPORT void _LICE__SetTextCombineMode(LICE_IFont* ifont, int mode, float alpha);
REAPER_PLUGIN_DLL_EXPORT void _LICE_Arc(LICE_IBitmap* dest, float cx, float cy, float r, float minAngle, float maxAngle, LICE_pixel color, float alpha, int mode, bool aa);
REAPER_PLUGIN_DLL_EXPORT void _LICE_Blit(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int srcx, int srcy, int srcw, int srch, float alpha, int mode);
REAPER_PLUGIN_DLL_EXPORT void _LICE_Blur(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int srcx, int srcy, int srcw, int srch);
REAPER_PLUGIN_DLL_EXPORT void _LICE_BorderedRect(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel bgcolor, LICE_pixel fgcolor, float alpha, int mode);
REAPER_PLUGIN_DLL_EXPORT void _LICE_Circle(LICE_IBitmap* dest, float cx, float cy, float r, LICE_pixel color, float alpha, int mode, bool aa);
REAPER_PLUGIN_DLL_EXPORT void _LICE_Clear(LICE_IBitmap* dest, LICE_pixel color);
REAPER_PLUGIN_DLL_EXPORT void _LICE_ClearRect(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel mask, LICE_pixel orbits);
REAPER_PLUGIN_DLL_EXPORT bool _LICE_ClipLine(int* pX1Out, int* pY1Out, int* pX2Out, int* pY2Out, int xLo, int yLo, int xHi, int yHi);
REAPER_PLUGIN_DLL_EXPORT void _LICE_Copy(LICE_IBitmap* dest, LICE_IBitmap* src);
REAPER_PLUGIN_DLL_EXPORT LICE_IBitmap* _LICE_CreateBitmap(int mode, int w, int h);
REAPER_PLUGIN_DLL_EXPORT LICE_IFont* _LICE_CreateFont();
REAPER_PLUGIN_DLL_EXPORT void _LICE_DrawCBezier(LICE_IBitmap* dest, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, LICE_pixel color, float alpha, int mode, bool aa, double tol);
REAPER_PLUGIN_DLL_EXPORT void _LICE_DrawChar(LICE_IBitmap* bm, int x, int y, char c, LICE_pixel color, float alpha, int mode);
REAPER_PLUGIN_DLL_EXPORT void _LICE_DrawGlyph(LICE_IBitmap* dest, int x, int y, LICE_pixel color, LICE_pixel_chan* alphas, int glyph_w, int glyph_h, float alpha, int mode);
REAPER_PLUGIN_DLL_EXPORT void _LICE_DrawRect(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel color, float alpha, int mode);
REAPER_PLUGIN_DLL_EXPORT void _LICE_DrawText(LICE_IBitmap* bm, int x, int y, const char* string, LICE_pixel color, float alpha, int mode);
REAPER_PLUGIN_DLL_EXPORT void _LICE_FillCBezier(LICE_IBitmap* dest, double xstart, double ystart, double xctl1, double yctl1, double xctl2, double yctl2, double xend, double yend, int yfill, LICE_pixel color, float alpha, int mode, bool aa, double tol);
REAPER_PLUGIN_DLL_EXPORT void _LICE_FillCircle(LICE_IBitmap* dest, float cx, float cy, float r, LICE_pixel color, float alpha, int mode, bool aa);
REAPER_PLUGIN_DLL_EXPORT void _LICE_FillConvexPolygon(LICE_IBitmap* dest, int* x, int* y, int npoints, LICE_pixel color, float alpha, int mode);
REAPER_PLUGIN_DLL_EXPORT void _LICE_FillRect(LICE_IBitmap* dest, int x, int y, int w, int h, LICE_pixel color, float alpha, int mode);
REAPER_PLUGIN_DLL_EXPORT void _LICE_FillTrapezoid(LICE_IBitmap* dest, int x1a, int x1b, int y1, int x2a, int x2b, int y2, LICE_pixel color, float alpha, int mode);
REAPER_PLUGIN_DLL_EXPORT void _LICE_FillTriangle(LICE_IBitmap* dest, int x1, int y1, int x2, int y2, int x3, int y3, LICE_pixel color, float alpha, int mode);
REAPER_PLUGIN_DLL_EXPORT LICE_pixel _LICE_GetPixel(LICE_IBitmap* bm, int x, int y);
REAPER_PLUGIN_DLL_EXPORT void _LICE_GradRect(LICE_IBitmap* dest, int dstx, int dsty, int dstw, int dsth, float ir, float ig, float ib, float ia, float drdx, float dgdx, float dbdx, float dadx, float drdy, float dgdy, float dbdy, float dady, int mode);
REAPER_PLUGIN_DLL_EXPORT void _LICE_Line(LICE_IBitmap* dest, float x1, float y1, float x2, float y2, LICE_pixel color, float alpha, int mode, bool aa);
REAPER_PLUGIN_DLL_EXPORT void _LICE_LineInt(LICE_IBitmap* dest, int x1, int y1, int x2, int y2, LICE_pixel color, float alpha, int mode, bool aa);
REAPER_PLUGIN_DLL_EXPORT LICE_IBitmap* _LICE_LoadPNG(const char* filename, LICE_IBitmap* bmp);
REAPER_PLUGIN_DLL_EXPORT LICE_IBitmap* _LICE_LoadPNGFromResource(HINSTANCE hInst, const char* resid, LICE_IBitmap* bmp);
REAPER_PLUGIN_DLL_EXPORT void _LICE_MeasureText(const char* string, int* w, int* h);
REAPER_PLUGIN_DLL_EXPORT void _LICE_MultiplyAddRect(LICE_IBitmap* dest, int x, int y, int w, int h, float rsc, float gsc, float bsc, float asc, float radd, float gadd, float badd, float aadd);
REAPER_PLUGIN_DLL_EXPORT void _LICE_PutPixel(LICE_IBitmap* bm, int x, int y, LICE_pixel color, float alpha, int mode);
REAPER_PLUGIN_DLL_EXPORT void _LICE_RotatedBlit(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int dstw, int dsth, float srcx, float srcy, float srcw, float srch, float angle, bool cliptosourcerect, float alpha, int mode, float rotxcent, float rotycent);
REAPER_PLUGIN_DLL_EXPORT void _LICE_RoundRect(LICE_IBitmap* drawbm, float xpos, float ypos, float w, float h, int cornerradius, LICE_pixel col, float alpha, int mode, bool aa);
REAPER_PLUGIN_DLL_EXPORT void _LICE_ScaledBlit(LICE_IBitmap* dest, LICE_IBitmap* src, int dstx, int dsty, int dstw, int dsth, float srcx, float srcy, float srcw, float srch, float alpha, int mode);
REAPER_PLUGIN_DLL_EXPORT void _LICE_SimpleFill(LICE_IBitmap* dest, int x, int y, LICE_pixel newcolor, LICE_pixel comparemask, LICE_pixel keepmask);
REAPER_PLUGIN_DLL_EXPORT const char* _LocalizeString(const char* src_string, const char* section, int flagsOptional);
REAPER_PLUGIN_DLL_EXPORT bool _Loop_OnArrow(ReaProject* project, int direction);
REAPER_PLUGIN_DLL_EXPORT void _Main_OnCommand(int command, int flag);
REAPER_PLUGIN_DLL_EXPORT void _Main_OnCommandEx(int command, int flag, ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT void _Main_openProject(const char* name);
REAPER_PLUGIN_DLL_EXPORT void _Main_SaveProject(ReaProject* proj, bool forceSaveAsInOptional);
REAPER_PLUGIN_DLL_EXPORT void _Main_UpdateLoopInfo(int ignoremask);
REAPER_PLUGIN_DLL_EXPORT void _MarkProjectDirty(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT void _MarkTrackItemsDirty(MediaTrack* track, MediaItem* item);
REAPER_PLUGIN_DLL_EXPORT double _Master_GetPlayRate(ReaProject* project);
REAPER_PLUGIN_DLL_EXPORT double _Master_GetPlayRateAtTime(double time_s, ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT double _Master_GetTempo();
REAPER_PLUGIN_DLL_EXPORT double _Master_NormalizePlayRate(double playrate, bool isnormalized);
REAPER_PLUGIN_DLL_EXPORT double _Master_NormalizeTempo(double bpm, bool isnormalized);
REAPER_PLUGIN_DLL_EXPORT int _MB(const char* msg, const char* title, int type);
REAPER_PLUGIN_DLL_EXPORT int _MediaItemDescendsFromTrack(MediaItem* item, MediaTrack* track);
REAPER_PLUGIN_DLL_EXPORT int _MIDI_CountEvts(MediaItem_Take* take, int* notecntOut, int* ccevtcntOut, int* textsyxevtcntOut);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_DeleteCC(MediaItem_Take* take, int ccidx);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_DeleteEvt(MediaItem_Take* take, int evtidx);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_DeleteNote(MediaItem_Take* take, int noteidx);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_DeleteTextSysexEvt(MediaItem_Take* take, int textsyxevtidx);
REAPER_PLUGIN_DLL_EXPORT void _MIDI_DisableSort(MediaItem_Take* take);
REAPER_PLUGIN_DLL_EXPORT int _MIDI_EnumSelCC(MediaItem_Take* take, int ccidx);
REAPER_PLUGIN_DLL_EXPORT int _MIDI_EnumSelEvts(MediaItem_Take* take, int evtidx);
REAPER_PLUGIN_DLL_EXPORT int _MIDI_EnumSelNotes(MediaItem_Take* take, int noteidx);
REAPER_PLUGIN_DLL_EXPORT int _MIDI_EnumSelTextSysexEvts(MediaItem_Take* take, int textsyxidx);
REAPER_PLUGIN_DLL_EXPORT MIDI_eventlist* _MIDI_eventlist_Create();
REAPER_PLUGIN_DLL_EXPORT void _MIDI_eventlist_Destroy(MIDI_eventlist* evtlist);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_GetAllEvts(MediaItem_Take* take, char* bufNeedBig, int* bufNeedBig_sz);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_GetCC(MediaItem_Take* take, int ccidx, bool* selectedOut, bool* mutedOut, double* ppqposOut, int* chanmsgOut, int* chanOut, int* msg2Out, int* msg3Out);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_GetCCShape(MediaItem_Take* take, int ccidx, int* shapeOut, double* beztensionOut);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_GetEvt(MediaItem_Take* take, int evtidx, bool* selectedOut, bool* mutedOut, double* ppqposOut, char* msg, int* msg_sz);
REAPER_PLUGIN_DLL_EXPORT double _MIDI_GetGrid(MediaItem_Take* take, double* swingOutOptional, double* noteLenOutOptional);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_GetHash(MediaItem_Take* take, bool notesonly, char* hash, int hash_sz);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_GetNote(MediaItem_Take* take, int noteidx, bool* selectedOut, bool* mutedOut, double* startppqposOut, double* endppqposOut, int* chanOut, int* pitchOut, int* velOut);
REAPER_PLUGIN_DLL_EXPORT double _MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take* take, double ppqpos);
REAPER_PLUGIN_DLL_EXPORT double _MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take* take, double ppqpos);
REAPER_PLUGIN_DLL_EXPORT double _MIDI_GetPPQPosFromProjQN(MediaItem_Take* take, double projqn);
REAPER_PLUGIN_DLL_EXPORT double _MIDI_GetPPQPosFromProjTime(MediaItem_Take* take, double projtime);
REAPER_PLUGIN_DLL_EXPORT double _MIDI_GetProjQNFromPPQPos(MediaItem_Take* take, double ppqpos);
REAPER_PLUGIN_DLL_EXPORT double _MIDI_GetProjTimeFromPPQPos(MediaItem_Take* take, double ppqpos);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_GetScale(MediaItem_Take* take, int* rootOut, int* scaleOut, char* name, int name_sz);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_GetTextSysexEvt(MediaItem_Take* take, int textsyxevtidx, bool* selectedOutOptional, bool* mutedOutOptional, double* ppqposOutOptional, int* typeOutOptional, char* msgOptional, int* msgOptional_sz);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_GetTrackHash(MediaTrack* track, bool notesonly, char* hash, int hash_sz);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_InsertCC(MediaItem_Take* take, bool selected, bool muted, double ppqpos, int chanmsg, int chan, int msg2, int msg3);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_InsertEvt(MediaItem_Take* take, bool selected, bool muted, double ppqpos, const char* bytestr, int bytestr_sz);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_InsertNote(MediaItem_Take* take, bool selected, bool muted, double startppqpos, double endppqpos, int chan, int pitch, int vel, const bool* noSortInOptional);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_InsertTextSysexEvt(MediaItem_Take* take, bool selected, bool muted, double ppqpos, int type, const char* bytestr, int bytestr_sz);
REAPER_PLUGIN_DLL_EXPORT void _midi_reinit();
REAPER_PLUGIN_DLL_EXPORT void _MIDI_SelectAll(MediaItem_Take* take, bool select);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_SetAllEvts(MediaItem_Take* take, const char* buf, int buf_sz);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_SetCC(MediaItem_Take* take, int ccidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const int* chanmsgInOptional, const int* chanInOptional, const int* msg2InOptional, const int* msg3InOptional, const bool* noSortInOptional);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_SetCCShape(MediaItem_Take* take, int ccidx, int shape, double beztension, const bool* noSortInOptional);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_SetEvt(MediaItem_Take* take, int evtidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const char* msgOptional, int msgOptional_sz, const bool* noSortInOptional);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_SetItemExtents(MediaItem* item, double startQN, double endQN);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_SetNote(MediaItem_Take* take, int noteidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* startppqposInOptional, const double* endppqposInOptional, const int* chanInOptional, const int* pitchInOptional, const int* velInOptional, const bool* noSortInOptional);
REAPER_PLUGIN_DLL_EXPORT bool _MIDI_SetTextSysexEvt(MediaItem_Take* take, int textsyxevtidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const int* typeInOptional, const char* msgOptional, int msgOptional_sz, const bool* noSortInOptional);
REAPER_PLUGIN_DLL_EXPORT void _MIDI_Sort(MediaItem_Take* take);
REAPER_PLUGIN_DLL_EXPORT HWND _MIDIEditor_GetActive();
REAPER_PLUGIN_DLL_EXPORT int _MIDIEditor_GetMode(HWND midieditor);
REAPER_PLUGIN_DLL_EXPORT int _MIDIEditor_GetSetting_int(HWND midieditor, const char* setting_desc);
REAPER_PLUGIN_DLL_EXPORT bool _MIDIEditor_GetSetting_str(HWND midieditor, const char* setting_desc, char* buf, int buf_sz);
REAPER_PLUGIN_DLL_EXPORT MediaItem_Take* _MIDIEditor_GetTake(HWND midieditor);
REAPER_PLUGIN_DLL_EXPORT bool _MIDIEditor_LastFocused_OnCommand(int command_id, bool islistviewcommand);
REAPER_PLUGIN_DLL_EXPORT bool _MIDIEditor_OnCommand(HWND midieditor, int command_id);
REAPER_PLUGIN_DLL_EXPORT bool _MIDIEditor_SetSetting_int(HWND midieditor, const char* setting_desc, int setting);
REAPER_PLUGIN_DLL_EXPORT void _mkpanstr(char* strNeed64, double pan);
REAPER_PLUGIN_DLL_EXPORT void _mkvolpanstr(char* strNeed64, double vol, double pan);
REAPER_PLUGIN_DLL_EXPORT void _mkvolstr(char* strNeed64, double vol);
REAPER_PLUGIN_DLL_EXPORT void _MoveEditCursor(double adjamt, bool dosel);
REAPER_PLUGIN_DLL_EXPORT bool _MoveMediaItemToTrack(MediaItem* item, MediaTrack* desttr);
REAPER_PLUGIN_DLL_EXPORT void _MuteAllTracks(bool mute);
REAPER_PLUGIN_DLL_EXPORT void _my_getViewport(RECT* r, const RECT* sr, bool wantWorkArea);
REAPER_PLUGIN_DLL_EXPORT int _NamedCommandLookup(const char* command_name);
REAPER_PLUGIN_DLL_EXPORT void _OnPauseButton();
REAPER_PLUGIN_DLL_EXPORT void _OnPauseButtonEx(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT void _OnPlayButton();
REAPER_PLUGIN_DLL_EXPORT void _OnPlayButtonEx(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT void _OnStopButton();
REAPER_PLUGIN_DLL_EXPORT void _OnStopButtonEx(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT bool _OpenColorThemeFile(const char* fn);
REAPER_PLUGIN_DLL_EXPORT HWND _OpenMediaExplorer(const char* mediafn, bool play);
REAPER_PLUGIN_DLL_EXPORT void _OscLocalMessageToHost(const char* message, const double* valueInOptional);
REAPER_PLUGIN_DLL_EXPORT double _parse_timestr(const char* buf);
REAPER_PLUGIN_DLL_EXPORT double _parse_timestr_len(const char* buf, double offset, int modeoverride);
REAPER_PLUGIN_DLL_EXPORT double _parse_timestr_pos(const char* buf, int modeoverride);
REAPER_PLUGIN_DLL_EXPORT double _parsepanstr(const char* str);
REAPER_PLUGIN_DLL_EXPORT PCM_sink* _PCM_Sink_Create(const char* filename, const char* cfg, int cfg_sz, int nch, int srate, bool buildpeaks);
REAPER_PLUGIN_DLL_EXPORT PCM_sink* _PCM_Sink_CreateEx(ReaProject* proj, const char* filename, const char* cfg, int cfg_sz, int nch, int srate, bool buildpeaks);
REAPER_PLUGIN_DLL_EXPORT PCM_sink* _PCM_Sink_CreateMIDIFile(const char* filename, const char* cfg, int cfg_sz, double bpm, int div);
REAPER_PLUGIN_DLL_EXPORT PCM_sink* _PCM_Sink_CreateMIDIFileEx(ReaProject* proj, const char* filename, const char* cfg, int cfg_sz, double bpm, int div);
REAPER_PLUGIN_DLL_EXPORT unsigned int _PCM_Sink_Enum(int idx, const char** descstrOut);
REAPER_PLUGIN_DLL_EXPORT const char* _PCM_Sink_GetExtension(const char* data, int data_sz);
REAPER_PLUGIN_DLL_EXPORT HWND _PCM_Sink_ShowConfig(const char* cfg, int cfg_sz, HWND hwndParent);
REAPER_PLUGIN_DLL_EXPORT PCM_source* _PCM_Source_CreateFromFile(const char* filename);
REAPER_PLUGIN_DLL_EXPORT PCM_source* _PCM_Source_CreateFromFileEx(const char* filename, bool forcenoMidiImp);
REAPER_PLUGIN_DLL_EXPORT PCM_source* _PCM_Source_CreateFromSimple(ISimpleMediaDecoder* dec, const char* fn);
REAPER_PLUGIN_DLL_EXPORT PCM_source* _PCM_Source_CreateFromType(const char* sourcetype);
REAPER_PLUGIN_DLL_EXPORT void _PCM_Source_Destroy(PCM_source* src);
REAPER_PLUGIN_DLL_EXPORT int _PCM_Source_GetPeaks(PCM_source* src, double peakrate, double starttime, int numchannels, int numsamplesperchannel, int want_extra_type, double* buf);
REAPER_PLUGIN_DLL_EXPORT bool _PCM_Source_GetSectionInfo(PCM_source* src, double* offsOut, double* lenOut, bool* revOut);
REAPER_PLUGIN_DLL_EXPORT REAPER_PeakBuild_Interface* _PeakBuild_Create(PCM_source* src, const char* fn, int srate, int nch);
REAPER_PLUGIN_DLL_EXPORT REAPER_PeakBuild_Interface* _PeakBuild_CreateEx(PCM_source* src, const char* fn, int srate, int nch, int flags);
REAPER_PLUGIN_DLL_EXPORT REAPER_PeakGet_Interface* _PeakGet_Create(const char* fn, int srate, int nch);
REAPER_PLUGIN_DLL_EXPORT int _PitchShiftSubModeMenu(HWND hwnd, int x, int y, int mode, int submode_sel);
REAPER_PLUGIN_DLL_EXPORT int _PlayPreview(preview_register_t* preview);
REAPER_PLUGIN_DLL_EXPORT int _PlayPreviewEx(preview_register_t* preview, int bufflags, double measure_align);
REAPER_PLUGIN_DLL_EXPORT int _PlayTrackPreview(preview_register_t* preview);
REAPER_PLUGIN_DLL_EXPORT int _PlayTrackPreview2(ReaProject* proj, preview_register_t* preview);
REAPER_PLUGIN_DLL_EXPORT int _PlayTrackPreview2Ex(ReaProject* proj, preview_register_t* preview, int flags, double measure_align);
REAPER_PLUGIN_DLL_EXPORT void* _plugin_getapi(const char* name);
REAPER_PLUGIN_DLL_EXPORT const char* _plugin_getFilterList();
REAPER_PLUGIN_DLL_EXPORT const char* _plugin_getImportableProjectFilterList();
REAPER_PLUGIN_DLL_EXPORT int _plugin_register(const char* name, void* infostruct);
REAPER_PLUGIN_DLL_EXPORT void _PluginWantsAlwaysRunFx(int amt);
REAPER_PLUGIN_DLL_EXPORT void _PreventUIRefresh(int prevent_count);
REAPER_PLUGIN_DLL_EXPORT void* _projectconfig_var_addr(ReaProject* proj, int idx);
REAPER_PLUGIN_DLL_EXPORT int _projectconfig_var_getoffs(const char* name, int* szOut);
REAPER_PLUGIN_DLL_EXPORT int _PromptForAction(int session_mode, int init_id, int section_id);
REAPER_PLUGIN_DLL_EXPORT bool _realloc_cmd_ptr(char** ptr, int* ptr_size, int new_size);
REAPER_PLUGIN_DLL_EXPORT IReaperPitchShift* _ReaperGetPitchShiftAPI(int version);
REAPER_PLUGIN_DLL_EXPORT void _ReaScriptError(const char* errmsg);
REAPER_PLUGIN_DLL_EXPORT int _RecursiveCreateDirectory(const char* path, size_t ignored);
REAPER_PLUGIN_DLL_EXPORT int _reduce_open_files(int flags);
REAPER_PLUGIN_DLL_EXPORT void _RefreshToolbar(int command_id);
REAPER_PLUGIN_DLL_EXPORT void _RefreshToolbar2(int section_id, int command_id);
REAPER_PLUGIN_DLL_EXPORT void _relative_fn(const char* in, char* out, int out_sz);
REAPER_PLUGIN_DLL_EXPORT bool _RemoveTrackSend(MediaTrack* tr, int category, int sendidx);
REAPER_PLUGIN_DLL_EXPORT bool _RenderFileSection(const char* source_filename, const char* target_filename, double start_percent, double end_percent, double playrate);
REAPER_PLUGIN_DLL_EXPORT bool _ReorderSelectedTracks(int beforeTrackIdx, int makePrevFolder);
REAPER_PLUGIN_DLL_EXPORT const char* _Resample_EnumModes(int mode);
REAPER_PLUGIN_DLL_EXPORT REAPER_Resample_Interface* _Resampler_Create();
REAPER_PLUGIN_DLL_EXPORT void _resolve_fn(const char* in, char* out, int out_sz);
REAPER_PLUGIN_DLL_EXPORT void _resolve_fn2(const char* in, char* out, int out_sz, const char* checkSubDirOptional);
REAPER_PLUGIN_DLL_EXPORT const char* _ReverseNamedCommandLookup(int command_id);
REAPER_PLUGIN_DLL_EXPORT double _ScaleFromEnvelopeMode(int scaling_mode, double val);
REAPER_PLUGIN_DLL_EXPORT double _ScaleToEnvelopeMode(int scaling_mode, double val);
REAPER_PLUGIN_DLL_EXPORT void _screenset_register(char* id, void* callbackFunc, void* param);
REAPER_PLUGIN_DLL_EXPORT void _screenset_registerNew(char* id, screensetNewCallbackFunc callbackFunc, void* param);
REAPER_PLUGIN_DLL_EXPORT void _screenset_unregister(char* id);
REAPER_PLUGIN_DLL_EXPORT void _screenset_unregisterByParam(void* param);
REAPER_PLUGIN_DLL_EXPORT void _screenset_updateLastFocus(HWND prevWin);
REAPER_PLUGIN_DLL_EXPORT KbdSectionInfo* _SectionFromUniqueID(int uniqueID);
REAPER_PLUGIN_DLL_EXPORT void _SelectAllMediaItems(ReaProject* proj, bool selected);
REAPER_PLUGIN_DLL_EXPORT void _SelectProjectInstance(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT void _SendLocalOscMessage(void* local_osc_handler, const char* msg, int msglen);
REAPER_PLUGIN_DLL_EXPORT void _SetActiveTake(MediaItem_Take* take);
REAPER_PLUGIN_DLL_EXPORT void _SetAutomationMode(int mode, bool onlySel);
REAPER_PLUGIN_DLL_EXPORT void _SetCurrentBPM(ReaProject* __proj, double bpm, bool wantUndo);
REAPER_PLUGIN_DLL_EXPORT void _SetCursorContext(int mode, TrackEnvelope* envInOptional);
REAPER_PLUGIN_DLL_EXPORT void _SetEditCurPos(double time, bool moveview, bool seekplay);
REAPER_PLUGIN_DLL_EXPORT void _SetEditCurPos2(ReaProject* proj, double time, bool moveview, bool seekplay);
REAPER_PLUGIN_DLL_EXPORT bool _SetEnvelopePoint(TrackEnvelope* envelope, int ptidx, double* timeInOptional, double* valueInOptional, int* shapeInOptional, double* tensionInOptional, bool* selectedInOptional, bool* noSortInOptional);
REAPER_PLUGIN_DLL_EXPORT bool _SetEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx, double* timeInOptional, double* valueInOptional, int* shapeInOptional, double* tensionInOptional, bool* selectedInOptional, bool* noSortInOptional);
REAPER_PLUGIN_DLL_EXPORT bool _SetEnvelopeStateChunk(TrackEnvelope* env, const char* str, bool isundoOptional);
REAPER_PLUGIN_DLL_EXPORT void _SetExtState(const char* section, const char* key, const char* value, bool persist);
REAPER_PLUGIN_DLL_EXPORT void _SetGlobalAutomationOverride(int mode);
REAPER_PLUGIN_DLL_EXPORT bool _SetItemStateChunk(MediaItem* item, const char* str, bool isundoOptional);
REAPER_PLUGIN_DLL_EXPORT int _SetMasterTrackVisibility(int flag);
REAPER_PLUGIN_DLL_EXPORT bool _SetMediaItemInfo_Value(MediaItem* item, const char* parmname, double newvalue);
REAPER_PLUGIN_DLL_EXPORT bool _SetMediaItemLength(MediaItem* item, double length, bool refreshUI);
REAPER_PLUGIN_DLL_EXPORT bool _SetMediaItemPosition(MediaItem* item, double position, bool refreshUI);
REAPER_PLUGIN_DLL_EXPORT void _SetMediaItemSelected(MediaItem* item, bool selected);
REAPER_PLUGIN_DLL_EXPORT bool _SetMediaItemTake_Source(MediaItem_Take* take, PCM_source* source);
REAPER_PLUGIN_DLL_EXPORT bool _SetMediaItemTakeInfo_Value(MediaItem_Take* take, const char* parmname, double newvalue);
REAPER_PLUGIN_DLL_EXPORT bool _SetMediaTrackInfo_Value(MediaTrack* tr, const char* parmname, double newvalue);
REAPER_PLUGIN_DLL_EXPORT void _SetMIDIEditorGrid(ReaProject* project, double division);
REAPER_PLUGIN_DLL_EXPORT MediaTrack* _SetMixerScroll(MediaTrack* leftmosttrack);
REAPER_PLUGIN_DLL_EXPORT void _SetMouseModifier(const char* context, int modifier_flag, const char* action);
REAPER_PLUGIN_DLL_EXPORT void _SetOnlyTrackSelected(MediaTrack* track);
REAPER_PLUGIN_DLL_EXPORT void _SetProjectGrid(ReaProject* project, double division);
REAPER_PLUGIN_DLL_EXPORT bool _SetProjectMarker(int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name);
REAPER_PLUGIN_DLL_EXPORT bool _SetProjectMarker2(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name);
REAPER_PLUGIN_DLL_EXPORT bool _SetProjectMarker3(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name, int color);
REAPER_PLUGIN_DLL_EXPORT bool _SetProjectMarker4(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name, int color, int flags);
REAPER_PLUGIN_DLL_EXPORT bool _SetProjectMarkerByIndex(ReaProject* proj, int markrgnidx, bool isrgn, double pos, double rgnend, int IDnumber, const char* name, int color);
REAPER_PLUGIN_DLL_EXPORT bool _SetProjectMarkerByIndex2(ReaProject* proj, int markrgnidx, bool isrgn, double pos, double rgnend, int IDnumber, const char* name, int color, int flags);
REAPER_PLUGIN_DLL_EXPORT int _SetProjExtState(ReaProject* proj, const char* extname, const char* key, const char* value);
REAPER_PLUGIN_DLL_EXPORT void _SetRegionRenderMatrix(ReaProject* proj, int regionindex, MediaTrack* track, int addorremove);
REAPER_PLUGIN_DLL_EXPORT void _SetRenderLastError(const char* errorstr);
REAPER_PLUGIN_DLL_EXPORT int _SetTakeMarker(MediaItem_Take* take, int idx, const char* nameIn, double* srcposInOptional, int* colorInOptional);
REAPER_PLUGIN_DLL_EXPORT int _SetTakeStretchMarker(MediaItem_Take* take, int idx, double pos, const double* srcposInOptional);
REAPER_PLUGIN_DLL_EXPORT bool _SetTakeStretchMarkerSlope(MediaItem_Take* take, int idx, double slope);
REAPER_PLUGIN_DLL_EXPORT bool _SetTempoTimeSigMarker(ReaProject* proj, int ptidx, double timepos, int measurepos, double beatpos, double bpm, int timesig_num, int timesig_denom, bool lineartempo);
REAPER_PLUGIN_DLL_EXPORT int _SetThemeColor(const char* ini_key, int color, int flagsOptional);
REAPER_PLUGIN_DLL_EXPORT bool _SetToggleCommandState(int section_id, int command_id, int state);
REAPER_PLUGIN_DLL_EXPORT void _SetTrackAutomationMode(MediaTrack* tr, int mode);
REAPER_PLUGIN_DLL_EXPORT void _SetTrackColor(MediaTrack* track, int color);
REAPER_PLUGIN_DLL_EXPORT bool _SetTrackMIDILyrics(MediaTrack* track, int flag, const char* str);
REAPER_PLUGIN_DLL_EXPORT bool _SetTrackMIDINoteName(int track, int pitch, int chan, const char* name);
REAPER_PLUGIN_DLL_EXPORT bool _SetTrackMIDINoteNameEx(ReaProject* proj, MediaTrack* track, int pitch, int chan, const char* name);
REAPER_PLUGIN_DLL_EXPORT void _SetTrackSelected(MediaTrack* track, bool selected);
REAPER_PLUGIN_DLL_EXPORT bool _SetTrackSendInfo_Value(MediaTrack* tr, int category, int sendidx, const char* parmname, double newvalue);
REAPER_PLUGIN_DLL_EXPORT bool _SetTrackSendUIPan(MediaTrack* track, int send_idx, double pan, int isend);
REAPER_PLUGIN_DLL_EXPORT bool _SetTrackSendUIVol(MediaTrack* track, int send_idx, double vol, int isend);
REAPER_PLUGIN_DLL_EXPORT bool _SetTrackStateChunk(MediaTrack* track, const char* str, bool isundoOptional);
REAPER_PLUGIN_DLL_EXPORT void _ShowActionList(KbdSectionInfo* caller, HWND callerWnd);
REAPER_PLUGIN_DLL_EXPORT void _ShowConsoleMsg(const char* msg);
REAPER_PLUGIN_DLL_EXPORT int _ShowMessageBox(const char* msg, const char* title, int type);
REAPER_PLUGIN_DLL_EXPORT void _ShowPopupMenu(const char* name, int x, int y, HWND hwndParentOptional, void* ctxOptional, int ctx2Optional, int ctx3Optional);
REAPER_PLUGIN_DLL_EXPORT double _SLIDER2DB(double y);
REAPER_PLUGIN_DLL_EXPORT double _SnapToGrid(ReaProject* project, double time_pos);
REAPER_PLUGIN_DLL_EXPORT void _SoloAllTracks(int solo);
REAPER_PLUGIN_DLL_EXPORT HWND _Splash_GetWnd();
REAPER_PLUGIN_DLL_EXPORT MediaItem* _SplitMediaItem(MediaItem* item, double position);
REAPER_PLUGIN_DLL_EXPORT int _StopPreview(preview_register_t* preview);
REAPER_PLUGIN_DLL_EXPORT int _StopTrackPreview(preview_register_t* preview);
REAPER_PLUGIN_DLL_EXPORT int _StopTrackPreview2(void* proj, preview_register_t* preview);
REAPER_PLUGIN_DLL_EXPORT void _stringToGuid(const char* str, GUID* g);
REAPER_PLUGIN_DLL_EXPORT void _StuffMIDIMessage(int mode, int msg1, int msg2, int msg3);
REAPER_PLUGIN_DLL_EXPORT int _TakeFX_AddByName(MediaItem_Take* take, const char* fxname, int instantiate);
REAPER_PLUGIN_DLL_EXPORT void _TakeFX_CopyToTake(MediaItem_Take* src_take, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move);
REAPER_PLUGIN_DLL_EXPORT void _TakeFX_CopyToTrack(MediaItem_Take* src_take, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_Delete(MediaItem_Take* take, int fx);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_EndParamEdit(MediaItem_Take* take, int fx, int param);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_FormatParamValue(MediaItem_Take* take, int fx, int param, double val, char* buf, int buf_sz);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_FormatParamValueNormalized(MediaItem_Take* take, int fx, int param, double value, char* buf, int buf_sz);
REAPER_PLUGIN_DLL_EXPORT int _TakeFX_GetChainVisible(MediaItem_Take* take);
REAPER_PLUGIN_DLL_EXPORT int _TakeFX_GetCount(MediaItem_Take* take);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_GetEnabled(MediaItem_Take* take, int fx);
REAPER_PLUGIN_DLL_EXPORT TrackEnvelope* _TakeFX_GetEnvelope(MediaItem_Take* take, int fxindex, int parameterindex, bool create);
REAPER_PLUGIN_DLL_EXPORT HWND _TakeFX_GetFloatingWindow(MediaItem_Take* take, int index);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_GetFormattedParamValue(MediaItem_Take* take, int fx, int param, char* buf, int buf_sz);
REAPER_PLUGIN_DLL_EXPORT GUID* _TakeFX_GetFXGUID(MediaItem_Take* take, int fx);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_GetFXName(MediaItem_Take* take, int fx, char* buf, int buf_sz);
REAPER_PLUGIN_DLL_EXPORT int _TakeFX_GetIOSize(MediaItem_Take* take, int fx, int* inputPinsOutOptional, int* outputPinsOutOptional);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_GetNamedConfigParm(MediaItem_Take* take, int fx, const char* parmname, char* bufOut, int bufOut_sz);
REAPER_PLUGIN_DLL_EXPORT int _TakeFX_GetNumParams(MediaItem_Take* take, int fx);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_GetOffline(MediaItem_Take* take, int fx);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_GetOpen(MediaItem_Take* take, int fx);
REAPER_PLUGIN_DLL_EXPORT double _TakeFX_GetParam(MediaItem_Take* take, int fx, int param, double* minvalOut, double* maxvalOut);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_GetParameterStepSizes(MediaItem_Take* take, int fx, int param, double* stepOut, double* smallstepOut, double* largestepOut, bool* istoggleOut);
REAPER_PLUGIN_DLL_EXPORT double _TakeFX_GetParamEx(MediaItem_Take* take, int fx, int param, double* minvalOut, double* maxvalOut, double* midvalOut);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_GetParamName(MediaItem_Take* take, int fx, int param, char* buf, int buf_sz);
REAPER_PLUGIN_DLL_EXPORT double _TakeFX_GetParamNormalized(MediaItem_Take* take, int fx, int param);
REAPER_PLUGIN_DLL_EXPORT int _TakeFX_GetPinMappings(MediaItem_Take* tr, int fx, int isoutput, int pin, int* high32OutOptional);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_GetPreset(MediaItem_Take* take, int fx, char* presetname, int presetname_sz);
REAPER_PLUGIN_DLL_EXPORT int _TakeFX_GetPresetIndex(MediaItem_Take* take, int fx, int* numberOfPresetsOut);
REAPER_PLUGIN_DLL_EXPORT void _TakeFX_GetUserPresetFilename(MediaItem_Take* take, int fx, char* fn, int fn_sz);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_NavigatePresets(MediaItem_Take* take, int fx, int presetmove);
REAPER_PLUGIN_DLL_EXPORT void _TakeFX_SetEnabled(MediaItem_Take* take, int fx, bool enabled);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_SetNamedConfigParm(MediaItem_Take* take, int fx, const char* parmname, const char* value);
REAPER_PLUGIN_DLL_EXPORT void _TakeFX_SetOffline(MediaItem_Take* take, int fx, bool offline);
REAPER_PLUGIN_DLL_EXPORT void _TakeFX_SetOpen(MediaItem_Take* take, int fx, bool open);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_SetParam(MediaItem_Take* take, int fx, int param, double val);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_SetParamNormalized(MediaItem_Take* take, int fx, int param, double value);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_SetPinMappings(MediaItem_Take* tr, int fx, int isoutput, int pin, int low32bits, int hi32bits);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_SetPreset(MediaItem_Take* take, int fx, const char* presetname);
REAPER_PLUGIN_DLL_EXPORT bool _TakeFX_SetPresetByIndex(MediaItem_Take* take, int fx, int idx);
REAPER_PLUGIN_DLL_EXPORT void _TakeFX_Show(MediaItem_Take* take, int index, int showFlag);
REAPER_PLUGIN_DLL_EXPORT bool _TakeIsMIDI(MediaItem_Take* take);
REAPER_PLUGIN_DLL_EXPORT bool _ThemeLayout_GetLayout(const char* section, int idx, char* nameOut, int nameOut_sz);
REAPER_PLUGIN_DLL_EXPORT const char* _ThemeLayout_GetParameter(int wp, const char** descOutOptional, int* valueOutOptional, int* defValueOutOptional, int* minValueOutOptional, int* maxValueOutOptional);
REAPER_PLUGIN_DLL_EXPORT void _ThemeLayout_RefreshAll();
REAPER_PLUGIN_DLL_EXPORT bool _ThemeLayout_SetLayout(const char* section, const char* layout);
REAPER_PLUGIN_DLL_EXPORT bool _ThemeLayout_SetParameter(int wp, int value, bool persist);
REAPER_PLUGIN_DLL_EXPORT double _time_precise();
REAPER_PLUGIN_DLL_EXPORT double _TimeMap2_beatsToTime(ReaProject* proj, double tpos, const int* measuresInOptional);
REAPER_PLUGIN_DLL_EXPORT double _TimeMap2_GetDividedBpmAtTime(ReaProject* proj, double time);
REAPER_PLUGIN_DLL_EXPORT double _TimeMap2_GetNextChangeTime(ReaProject* proj, double time);
REAPER_PLUGIN_DLL_EXPORT double _TimeMap2_QNToTime(ReaProject* proj, double qn);
REAPER_PLUGIN_DLL_EXPORT double _TimeMap2_timeToBeats(ReaProject* proj, double tpos, int* measuresOutOptional, int* cmlOutOptional, double* fullbeatsOutOptional, int* cdenomOutOptional);
REAPER_PLUGIN_DLL_EXPORT double _TimeMap2_timeToQN(ReaProject* proj, double tpos);
REAPER_PLUGIN_DLL_EXPORT double _TimeMap_curFrameRate(ReaProject* proj, bool* dropFrameOutOptional);
REAPER_PLUGIN_DLL_EXPORT double _TimeMap_GetDividedBpmAtTime(double time);
REAPER_PLUGIN_DLL_EXPORT double _TimeMap_GetMeasureInfo(ReaProject* proj, int measure, double* qn_startOut, double* qn_endOut, int* timesig_numOut, int* timesig_denomOut, double* tempoOut);
REAPER_PLUGIN_DLL_EXPORT int _TimeMap_GetMetronomePattern(ReaProject* proj, double time, char* pattern, int pattern_sz);
REAPER_PLUGIN_DLL_EXPORT void _TimeMap_GetTimeSigAtTime(ReaProject* proj, double time, int* timesig_numOut, int* timesig_denomOut, double* tempoOut);
REAPER_PLUGIN_DLL_EXPORT int _TimeMap_QNToMeasures(ReaProject* proj, double qn, double* qnMeasureStartOutOptional, double* qnMeasureEndOutOptional);
REAPER_PLUGIN_DLL_EXPORT double _TimeMap_QNToTime(double qn);
REAPER_PLUGIN_DLL_EXPORT double _TimeMap_QNToTime_abs(ReaProject* proj, double qn);
REAPER_PLUGIN_DLL_EXPORT double _TimeMap_timeToQN(double tpos);
REAPER_PLUGIN_DLL_EXPORT double _TimeMap_timeToQN_abs(ReaProject* proj, double tpos);
REAPER_PLUGIN_DLL_EXPORT bool _ToggleTrackSendUIMute(MediaTrack* track, int send_idx);
REAPER_PLUGIN_DLL_EXPORT double _Track_GetPeakHoldDB(MediaTrack* track, int channel, bool clear);
REAPER_PLUGIN_DLL_EXPORT double _Track_GetPeakInfo(MediaTrack* track, int channel);
REAPER_PLUGIN_DLL_EXPORT void _TrackCtl_SetToolTip(const char* fmt, int xpos, int ypos, bool topmost);
REAPER_PLUGIN_DLL_EXPORT int _TrackFX_AddByName(MediaTrack* track, const char* fxname, bool recFX, int instantiate);
REAPER_PLUGIN_DLL_EXPORT void _TrackFX_CopyToTake(MediaTrack* src_track, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move);
REAPER_PLUGIN_DLL_EXPORT void _TrackFX_CopyToTrack(MediaTrack* src_track, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_Delete(MediaTrack* track, int fx);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_EndParamEdit(MediaTrack* track, int fx, int param);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_FormatParamValue(MediaTrack* track, int fx, int param, double val, char* buf, int buf_sz);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_FormatParamValueNormalized(MediaTrack* track, int fx, int param, double value, char* buf, int buf_sz);
REAPER_PLUGIN_DLL_EXPORT int _TrackFX_GetByName(MediaTrack* track, const char* fxname, bool instantiate);
REAPER_PLUGIN_DLL_EXPORT int _TrackFX_GetChainVisible(MediaTrack* track);
REAPER_PLUGIN_DLL_EXPORT int _TrackFX_GetCount(MediaTrack* track);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_GetEnabled(MediaTrack* track, int fx);
REAPER_PLUGIN_DLL_EXPORT int _TrackFX_GetEQ(MediaTrack* track, bool instantiate);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_GetEQBandEnabled(MediaTrack* track, int fxidx, int bandtype, int bandidx);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_GetEQParam(MediaTrack* track, int fxidx, int paramidx, int* bandtypeOut, int* bandidxOut, int* paramtypeOut, double* normvalOut);
REAPER_PLUGIN_DLL_EXPORT HWND _TrackFX_GetFloatingWindow(MediaTrack* track, int index);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_GetFormattedParamValue(MediaTrack* track, int fx, int param, char* buf, int buf_sz);
REAPER_PLUGIN_DLL_EXPORT GUID* _TrackFX_GetFXGUID(MediaTrack* track, int fx);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_GetFXName(MediaTrack* track, int fx, char* buf, int buf_sz);
REAPER_PLUGIN_DLL_EXPORT int _TrackFX_GetInstrument(MediaTrack* track);
REAPER_PLUGIN_DLL_EXPORT int _TrackFX_GetIOSize(MediaTrack* track, int fx, int* inputPinsOutOptional, int* outputPinsOutOptional);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_GetNamedConfigParm(MediaTrack* track, int fx, const char* parmname, char* bufOut, int bufOut_sz);
REAPER_PLUGIN_DLL_EXPORT int _TrackFX_GetNumParams(MediaTrack* track, int fx);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_GetOffline(MediaTrack* track, int fx);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_GetOpen(MediaTrack* track, int fx);
REAPER_PLUGIN_DLL_EXPORT double _TrackFX_GetParam(MediaTrack* track, int fx, int param, double* minvalOut, double* maxvalOut);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_GetParameterStepSizes(MediaTrack* track, int fx, int param, double* stepOut, double* smallstepOut, double* largestepOut, bool* istoggleOut);
REAPER_PLUGIN_DLL_EXPORT double _TrackFX_GetParamEx(MediaTrack* track, int fx, int param, double* minvalOut, double* maxvalOut, double* midvalOut);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_GetParamName(MediaTrack* track, int fx, int param, char* buf, int buf_sz);
REAPER_PLUGIN_DLL_EXPORT double _TrackFX_GetParamNormalized(MediaTrack* track, int fx, int param);
REAPER_PLUGIN_DLL_EXPORT int _TrackFX_GetPinMappings(MediaTrack* tr, int fx, int isoutput, int pin, int* high32OutOptional);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_GetPreset(MediaTrack* track, int fx, char* presetname, int presetname_sz);
REAPER_PLUGIN_DLL_EXPORT int _TrackFX_GetPresetIndex(MediaTrack* track, int fx, int* numberOfPresetsOut);
REAPER_PLUGIN_DLL_EXPORT int _TrackFX_GetRecChainVisible(MediaTrack* track);
REAPER_PLUGIN_DLL_EXPORT int _TrackFX_GetRecCount(MediaTrack* track);
REAPER_PLUGIN_DLL_EXPORT void _TrackFX_GetUserPresetFilename(MediaTrack* track, int fx, char* fn, int fn_sz);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_NavigatePresets(MediaTrack* track, int fx, int presetmove);
REAPER_PLUGIN_DLL_EXPORT void _TrackFX_SetEnabled(MediaTrack* track, int fx, bool enabled);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_SetEQBandEnabled(MediaTrack* track, int fxidx, int bandtype, int bandidx, bool enable);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_SetEQParam(MediaTrack* track, int fxidx, int bandtype, int bandidx, int paramtype, double val, bool isnorm);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_SetNamedConfigParm(MediaTrack* track, int fx, const char* parmname, const char* value);
REAPER_PLUGIN_DLL_EXPORT void _TrackFX_SetOffline(MediaTrack* track, int fx, bool offline);
REAPER_PLUGIN_DLL_EXPORT void _TrackFX_SetOpen(MediaTrack* track, int fx, bool open);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_SetParam(MediaTrack* track, int fx, int param, double val);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_SetParamNormalized(MediaTrack* track, int fx, int param, double value);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_SetPinMappings(MediaTrack* tr, int fx, int isoutput, int pin, int low32bits, int hi32bits);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_SetPreset(MediaTrack* track, int fx, const char* presetname);
REAPER_PLUGIN_DLL_EXPORT bool _TrackFX_SetPresetByIndex(MediaTrack* track, int fx, int idx);
REAPER_PLUGIN_DLL_EXPORT void _TrackFX_Show(MediaTrack* track, int index, int showFlag);
REAPER_PLUGIN_DLL_EXPORT void _TrackList_AdjustWindows(bool isMinor);
REAPER_PLUGIN_DLL_EXPORT void _TrackList_UpdateAllExternalSurfaces();
REAPER_PLUGIN_DLL_EXPORT void _Undo_BeginBlock();
REAPER_PLUGIN_DLL_EXPORT void _Undo_BeginBlock2(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT const char* _Undo_CanRedo2(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT const char* _Undo_CanUndo2(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT int _Undo_DoRedo2(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT int _Undo_DoUndo2(ReaProject* proj);
REAPER_PLUGIN_DLL_EXPORT void _Undo_EndBlock(const char* descchange, int extraflags);
REAPER_PLUGIN_DLL_EXPORT void _Undo_EndBlock2(ReaProject* proj, const char* descchange, int extraflags);
REAPER_PLUGIN_DLL_EXPORT void _Undo_OnStateChange(const char* descchange);
REAPER_PLUGIN_DLL_EXPORT void _Undo_OnStateChange2(ReaProject* proj, const char* descchange);
REAPER_PLUGIN_DLL_EXPORT void _Undo_OnStateChange_Item(ReaProject* proj, const char* name, MediaItem* item);
REAPER_PLUGIN_DLL_EXPORT void _Undo_OnStateChangeEx(const char* descchange, int whichStates, int trackparm);
REAPER_PLUGIN_DLL_EXPORT void _Undo_OnStateChangeEx2(ReaProject* proj, const char* descchange, int whichStates, int trackparm);
REAPER_PLUGIN_DLL_EXPORT void _update_disk_counters(int readamt, int writeamt);
REAPER_PLUGIN_DLL_EXPORT void _UpdateArrange();
REAPER_PLUGIN_DLL_EXPORT void _UpdateItemInProject(MediaItem* item);
REAPER_PLUGIN_DLL_EXPORT void _UpdateTimeline();
REAPER_PLUGIN_DLL_EXPORT bool _ValidatePtr(void* pointer, const char* ctypename);
REAPER_PLUGIN_DLL_EXPORT bool _ValidatePtr2(ReaProject* proj, void* pointer, const char* ctypename);
REAPER_PLUGIN_DLL_EXPORT void _ViewPrefs(int page, const char* pageByName);
